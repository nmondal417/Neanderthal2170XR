//
// Generated by Bluespec Compiler, version 2023.01-6-g034050db (build 034050db)
//
// On Mon May 15 01:21:41 EDT 2023
//
//
// Ports:
// Name                         I/O  size props
// pin_pu                         O     1 const
// rgb_led0_r                     O     1
// rgb_led0_g                     O     1
// rgb_led0_b                     O     1
// pin_clk                        I     1 clock
// usr_btn                        I     1 reset
// pin_usb_p                     IO     1 inout
// pin_usb_n                     IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module top(pin_clk,
	   usr_btn,

	   usb_core$pin_usb_p,
	   usb_core$pin_usb_n,

	   pin_pu,

	   rgb_led0_r,

	   rgb_led0_g,

	   rgb_led0_b);
  input  pin_clk;
  input  usr_btn;

  inout  usb_core$pin_usb_p;
  inout  usb_core$pin_usb_n;

  // value method pin_pu
  output pin_pu;

  // value method rgb_led0_r
  output rgb_led0_r;

  // value method rgb_led0_g
  output rgb_led0_g;

  // value method rgb_led0_b
  output rgb_led0_b;

  // signals for module outputs
  wire pin_pu, rgb_led0_b, rgb_led0_g, rgb_led0_r;

  // inlined wires
  reg [2 : 0] d_cache_mshr_port_0$wget, i_cache_mshr_port_0$wget;
  wire [512 : 0] dram_dl1_d_0_rv$port1__read,
		 dram_dl1_d_0_rv$port1__write_1,
		 dram_dl1_d_0_rv$port2__read,
		 dram_dl1_d_1_rv$port1__read,
		 dram_dl1_d_1_rv$port1__write_1,
		 dram_dl1_d_1_rv$port2__read,
		 dram_dl1_d_2_rv$port1__read,
		 dram_dl1_d_2_rv$port1__write_1,
		 dram_dl1_d_2_rv$port2__read,
		 dram_dl1_d_3_rv$port1__read,
		 dram_dl1_d_3_rv$port1__write_1,
		 dram_dl1_d_3_rv$port2__read,
		 dram_dl2_d_0_rv$port1__read,
		 dram_dl2_d_0_rv$port2__read,
		 dram_dl2_d_1_rv$port1__read,
		 dram_dl2_d_1_rv$port1__write_1,
		 dram_dl2_d_1_rv$port2__read,
		 dram_dl2_d_2_rv$port1__read,
		 dram_dl2_d_2_rv$port1__write_1,
		 dram_dl2_d_2_rv$port2__read,
		 dram_dl2_d_3_rv$port1__read,
		 dram_dl2_d_3_rv$port1__write_1,
		 dram_dl2_d_3_rv$port2__read;
  wire [65 : 0] i_cache_hitQ_rv$port0__write_1,
		i_cache_hitQ_rv$port1__read,
		i_cache_hitQ_rv$port2__read;
  wire [32 : 0] d_cache_hitQ_rv$port0__write_1,
		d_cache_hitQ_rv$port1__read,
		d_cache_hitQ_rv$port2__read;
  wire [2 : 0] d_cache_mshr_port_1$wget, i_cache_mshr_port_1$wget;
  wire [1 : 0] d_cache_cache_data_serverAdapter_s1_1$wget,
	       d_cache_cache_data_serverAdapter_writeWithResp$wget,
	       dram_bram_serverAdapter_s1_1$wget,
	       dram_bram_serverAdapter_writeWithResp$wget,
	       i_cache_cache_data_serverAdapter_s1_1$wget,
	       i_cache_cache_data_serverAdapter_writeWithResp$wget;
  wire d_cache_cache_data_serverAdapter_cnt_1$whas,
       d_cache_cache_data_serverAdapter_outData_dequeueing$whas,
       d_cache_cache_data_serverAdapter_outData_enqw$whas,
       d_cache_cache_data_serverAdapter_writeWithResp$whas,
       d_cache_hitQ_rv$EN_port0__write,
       d_cache_hitQ_rv$EN_port1__write,
       d_cache_mshr_port_0$whas,
       dram_bram_serverAdapter_cnt_1$whas,
       dram_bram_serverAdapter_outData_dequeueing$whas,
       dram_bram_serverAdapter_outData_enqw$whas,
       dram_bram_serverAdapter_writeWithResp$whas,
       dram_dl1_d_0_rv$EN_port0__write,
       dram_dl1_d_1_rv$EN_port0__write,
       dram_dl1_d_1_rv$EN_port1__write,
       dram_dl1_d_2_rv$EN_port0__write,
       dram_dl1_d_2_rv$EN_port1__write,
       dram_dl1_d_3_rv$EN_port0__write,
       dram_dl1_d_3_rv$EN_port1__write,
       dram_dl2_d_0_rv$EN_port0__write,
       dram_dl2_d_1_rv$EN_port0__write,
       dram_dl2_d_1_rv$EN_port1__write,
       dram_dl2_d_2_rv$EN_port0__write,
       dram_dl2_d_2_rv$EN_port1__write,
       dram_dl2_d_3_rv$EN_port0__write,
       dram_dl2_d_3_rv$EN_port1__write,
       i_cache_cache_data_serverAdapter_cnt_1$whas,
       i_cache_cache_data_serverAdapter_outData_dequeueing$whas,
       i_cache_cache_data_serverAdapter_outData_enqw$whas,
       i_cache_cache_data_serverAdapter_writeWithResp$whas,
       i_cache_hitQ_rv$EN_port0__write,
       i_cache_hitQ_rv$EN_port1__write,
       i_cache_mshr_port_0$whas;

  // register b
  reg [7 : 0] b;
  wire [7 : 0] b$D_IN;
  wire b$EN;

  // register cnt
  reg [7 : 0] cnt;
  wire [7 : 0] cnt$D_IN;
  wire cnt$EN;

  // register cycle_count
  reg [23 : 0] cycle_count;
  wire [23 : 0] cycle_count$D_IN;
  wire cycle_count$EN;

  // register d_cache_cache_data_serverAdapter_cnt
  reg [2 : 0] d_cache_cache_data_serverAdapter_cnt;
  wire [2 : 0] d_cache_cache_data_serverAdapter_cnt$D_IN;
  wire d_cache_cache_data_serverAdapter_cnt$EN;

  // register d_cache_cache_data_serverAdapter_s1
  reg [1 : 0] d_cache_cache_data_serverAdapter_s1;
  wire [1 : 0] d_cache_cache_data_serverAdapter_s1$D_IN;
  wire d_cache_cache_data_serverAdapter_s1$EN;

  // register d_cache_dirtyArray_0
  reg d_cache_dirtyArray_0;
  wire d_cache_dirtyArray_0$D_IN, d_cache_dirtyArray_0$EN;

  // register d_cache_dirtyArray_1
  reg d_cache_dirtyArray_1;
  wire d_cache_dirtyArray_1$D_IN, d_cache_dirtyArray_1$EN;

  // register d_cache_dirtyArray_10
  reg d_cache_dirtyArray_10;
  wire d_cache_dirtyArray_10$D_IN, d_cache_dirtyArray_10$EN;

  // register d_cache_dirtyArray_11
  reg d_cache_dirtyArray_11;
  wire d_cache_dirtyArray_11$D_IN, d_cache_dirtyArray_11$EN;

  // register d_cache_dirtyArray_12
  reg d_cache_dirtyArray_12;
  wire d_cache_dirtyArray_12$D_IN, d_cache_dirtyArray_12$EN;

  // register d_cache_dirtyArray_13
  reg d_cache_dirtyArray_13;
  wire d_cache_dirtyArray_13$D_IN, d_cache_dirtyArray_13$EN;

  // register d_cache_dirtyArray_14
  reg d_cache_dirtyArray_14;
  wire d_cache_dirtyArray_14$D_IN, d_cache_dirtyArray_14$EN;

  // register d_cache_dirtyArray_15
  reg d_cache_dirtyArray_15;
  wire d_cache_dirtyArray_15$D_IN, d_cache_dirtyArray_15$EN;

  // register d_cache_dirtyArray_2
  reg d_cache_dirtyArray_2;
  wire d_cache_dirtyArray_2$D_IN, d_cache_dirtyArray_2$EN;

  // register d_cache_dirtyArray_3
  reg d_cache_dirtyArray_3;
  wire d_cache_dirtyArray_3$D_IN, d_cache_dirtyArray_3$EN;

  // register d_cache_dirtyArray_4
  reg d_cache_dirtyArray_4;
  wire d_cache_dirtyArray_4$D_IN, d_cache_dirtyArray_4$EN;

  // register d_cache_dirtyArray_5
  reg d_cache_dirtyArray_5;
  wire d_cache_dirtyArray_5$D_IN, d_cache_dirtyArray_5$EN;

  // register d_cache_dirtyArray_6
  reg d_cache_dirtyArray_6;
  wire d_cache_dirtyArray_6$D_IN, d_cache_dirtyArray_6$EN;

  // register d_cache_dirtyArray_7
  reg d_cache_dirtyArray_7;
  wire d_cache_dirtyArray_7$D_IN, d_cache_dirtyArray_7$EN;

  // register d_cache_dirtyArray_8
  reg d_cache_dirtyArray_8;
  wire d_cache_dirtyArray_8$D_IN, d_cache_dirtyArray_8$EN;

  // register d_cache_dirtyArray_9
  reg d_cache_dirtyArray_9;
  wire d_cache_dirtyArray_9$D_IN, d_cache_dirtyArray_9$EN;

  // register d_cache_hitCount
  reg [31 : 0] d_cache_hitCount;
  wire [31 : 0] d_cache_hitCount$D_IN;
  wire d_cache_hitCount$EN;

  // register d_cache_hitQ_rv
  reg [32 : 0] d_cache_hitQ_rv;
  wire [32 : 0] d_cache_hitQ_rv$D_IN;
  wire d_cache_hitQ_rv$EN;

  // register d_cache_lockL1_register
  reg d_cache_lockL1_register;
  wire d_cache_lockL1_register$D_IN, d_cache_lockL1_register$EN;

  // register d_cache_missCount
  reg [31 : 0] d_cache_missCount;
  wire [31 : 0] d_cache_missCount$D_IN;
  wire d_cache_missCount$EN;

  // register d_cache_missReq
  reg [64 : 0] d_cache_missReq;
  wire [64 : 0] d_cache_missReq$D_IN;
  wire d_cache_missReq$EN;

  // register d_cache_mshr_register
  reg [2 : 0] d_cache_mshr_register;
  wire [2 : 0] d_cache_mshr_register$D_IN;
  wire d_cache_mshr_register$EN;

  // register d_cache_tagArray_0
  reg [21 : 0] d_cache_tagArray_0;
  wire [21 : 0] d_cache_tagArray_0$D_IN;
  wire d_cache_tagArray_0$EN;

  // register d_cache_tagArray_1
  reg [21 : 0] d_cache_tagArray_1;
  wire [21 : 0] d_cache_tagArray_1$D_IN;
  wire d_cache_tagArray_1$EN;

  // register d_cache_tagArray_10
  reg [21 : 0] d_cache_tagArray_10;
  wire [21 : 0] d_cache_tagArray_10$D_IN;
  wire d_cache_tagArray_10$EN;

  // register d_cache_tagArray_11
  reg [21 : 0] d_cache_tagArray_11;
  wire [21 : 0] d_cache_tagArray_11$D_IN;
  wire d_cache_tagArray_11$EN;

  // register d_cache_tagArray_12
  reg [21 : 0] d_cache_tagArray_12;
  wire [21 : 0] d_cache_tagArray_12$D_IN;
  wire d_cache_tagArray_12$EN;

  // register d_cache_tagArray_13
  reg [21 : 0] d_cache_tagArray_13;
  wire [21 : 0] d_cache_tagArray_13$D_IN;
  wire d_cache_tagArray_13$EN;

  // register d_cache_tagArray_14
  reg [21 : 0] d_cache_tagArray_14;
  wire [21 : 0] d_cache_tagArray_14$D_IN;
  wire d_cache_tagArray_14$EN;

  // register d_cache_tagArray_15
  reg [21 : 0] d_cache_tagArray_15;
  wire [21 : 0] d_cache_tagArray_15$D_IN;
  wire d_cache_tagArray_15$EN;

  // register d_cache_tagArray_2
  reg [21 : 0] d_cache_tagArray_2;
  wire [21 : 0] d_cache_tagArray_2$D_IN;
  wire d_cache_tagArray_2$EN;

  // register d_cache_tagArray_3
  reg [21 : 0] d_cache_tagArray_3;
  wire [21 : 0] d_cache_tagArray_3$D_IN;
  wire d_cache_tagArray_3$EN;

  // register d_cache_tagArray_4
  reg [21 : 0] d_cache_tagArray_4;
  wire [21 : 0] d_cache_tagArray_4$D_IN;
  wire d_cache_tagArray_4$EN;

  // register d_cache_tagArray_5
  reg [21 : 0] d_cache_tagArray_5;
  wire [21 : 0] d_cache_tagArray_5$D_IN;
  wire d_cache_tagArray_5$EN;

  // register d_cache_tagArray_6
  reg [21 : 0] d_cache_tagArray_6;
  wire [21 : 0] d_cache_tagArray_6$D_IN;
  wire d_cache_tagArray_6$EN;

  // register d_cache_tagArray_7
  reg [21 : 0] d_cache_tagArray_7;
  wire [21 : 0] d_cache_tagArray_7$D_IN;
  wire d_cache_tagArray_7$EN;

  // register d_cache_tagArray_8
  reg [21 : 0] d_cache_tagArray_8;
  wire [21 : 0] d_cache_tagArray_8$D_IN;
  wire d_cache_tagArray_8$EN;

  // register d_cache_tagArray_9
  reg [21 : 0] d_cache_tagArray_9;
  wire [21 : 0] d_cache_tagArray_9$D_IN;
  wire d_cache_tagArray_9$EN;

  // register d_cache_validArray_0
  reg d_cache_validArray_0;
  wire d_cache_validArray_0$D_IN, d_cache_validArray_0$EN;

  // register d_cache_validArray_1
  reg d_cache_validArray_1;
  wire d_cache_validArray_1$D_IN, d_cache_validArray_1$EN;

  // register d_cache_validArray_10
  reg d_cache_validArray_10;
  wire d_cache_validArray_10$D_IN, d_cache_validArray_10$EN;

  // register d_cache_validArray_11
  reg d_cache_validArray_11;
  wire d_cache_validArray_11$D_IN, d_cache_validArray_11$EN;

  // register d_cache_validArray_12
  reg d_cache_validArray_12;
  wire d_cache_validArray_12$D_IN, d_cache_validArray_12$EN;

  // register d_cache_validArray_13
  reg d_cache_validArray_13;
  wire d_cache_validArray_13$D_IN, d_cache_validArray_13$EN;

  // register d_cache_validArray_14
  reg d_cache_validArray_14;
  wire d_cache_validArray_14$D_IN, d_cache_validArray_14$EN;

  // register d_cache_validArray_15
  reg d_cache_validArray_15;
  wire d_cache_validArray_15$D_IN, d_cache_validArray_15$EN;

  // register d_cache_validArray_2
  reg d_cache_validArray_2;
  wire d_cache_validArray_2$D_IN, d_cache_validArray_2$EN;

  // register d_cache_validArray_3
  reg d_cache_validArray_3;
  wire d_cache_validArray_3$D_IN, d_cache_validArray_3$EN;

  // register d_cache_validArray_4
  reg d_cache_validArray_4;
  wire d_cache_validArray_4$D_IN, d_cache_validArray_4$EN;

  // register d_cache_validArray_5
  reg d_cache_validArray_5;
  wire d_cache_validArray_5$D_IN, d_cache_validArray_5$EN;

  // register d_cache_validArray_6
  reg d_cache_validArray_6;
  wire d_cache_validArray_6$D_IN, d_cache_validArray_6$EN;

  // register d_cache_validArray_7
  reg d_cache_validArray_7;
  wire d_cache_validArray_7$D_IN, d_cache_validArray_7$EN;

  // register d_cache_validArray_8
  reg d_cache_validArray_8;
  wire d_cache_validArray_8$D_IN, d_cache_validArray_8$EN;

  // register d_cache_validArray_9
  reg d_cache_validArray_9;
  wire d_cache_validArray_9$D_IN, d_cache_validArray_9$EN;

  // register dram_bram_serverAdapter_cnt
  reg [2 : 0] dram_bram_serverAdapter_cnt;
  wire [2 : 0] dram_bram_serverAdapter_cnt$D_IN;
  wire dram_bram_serverAdapter_cnt$EN;

  // register dram_bram_serverAdapter_s1
  reg [1 : 0] dram_bram_serverAdapter_s1;
  wire [1 : 0] dram_bram_serverAdapter_s1$D_IN;
  wire dram_bram_serverAdapter_s1$EN;

  // register dram_dl1_d_0_rv
  reg [512 : 0] dram_dl1_d_0_rv;
  wire [512 : 0] dram_dl1_d_0_rv$D_IN;
  wire dram_dl1_d_0_rv$EN;

  // register dram_dl1_d_1_rv
  reg [512 : 0] dram_dl1_d_1_rv;
  wire [512 : 0] dram_dl1_d_1_rv$D_IN;
  wire dram_dl1_d_1_rv$EN;

  // register dram_dl1_d_2_rv
  reg [512 : 0] dram_dl1_d_2_rv;
  wire [512 : 0] dram_dl1_d_2_rv$D_IN;
  wire dram_dl1_d_2_rv$EN;

  // register dram_dl1_d_3_rv
  reg [512 : 0] dram_dl1_d_3_rv;
  wire [512 : 0] dram_dl1_d_3_rv$D_IN;
  wire dram_dl1_d_3_rv$EN;

  // register dram_dl2_d_0_rv
  reg [512 : 0] dram_dl2_d_0_rv;
  wire [512 : 0] dram_dl2_d_0_rv$D_IN;
  wire dram_dl2_d_0_rv$EN;

  // register dram_dl2_d_1_rv
  reg [512 : 0] dram_dl2_d_1_rv;
  wire [512 : 0] dram_dl2_d_1_rv$D_IN;
  wire dram_dl2_d_1_rv$EN;

  // register dram_dl2_d_2_rv
  reg [512 : 0] dram_dl2_d_2_rv;
  wire [512 : 0] dram_dl2_d_2_rv$D_IN;
  wire dram_dl2_d_2_rv$EN;

  // register dram_dl2_d_3_rv
  reg [512 : 0] dram_dl2_d_3_rv;
  wire [512 : 0] dram_dl2_d_3_rv$D_IN;
  wire dram_dl2_d_3_rv$EN;

  // register dreq
  reg [67 : 0] dreq;
  wire [67 : 0] dreq$D_IN;
  wire dreq$EN;

  // register g
  reg [7 : 0] g;
  wire [7 : 0] g$D_IN;
  wire g$EN;

  // register i_cache_cache_data_serverAdapter_cnt
  reg [2 : 0] i_cache_cache_data_serverAdapter_cnt;
  wire [2 : 0] i_cache_cache_data_serverAdapter_cnt$D_IN;
  wire i_cache_cache_data_serverAdapter_cnt$EN;

  // register i_cache_cache_data_serverAdapter_s1
  reg [1 : 0] i_cache_cache_data_serverAdapter_s1;
  wire [1 : 0] i_cache_cache_data_serverAdapter_s1$D_IN;
  wire i_cache_cache_data_serverAdapter_s1$EN;

  // register i_cache_dirtyArray_0
  reg i_cache_dirtyArray_0;
  wire i_cache_dirtyArray_0$D_IN, i_cache_dirtyArray_0$EN;

  // register i_cache_dirtyArray_1
  reg i_cache_dirtyArray_1;
  wire i_cache_dirtyArray_1$D_IN, i_cache_dirtyArray_1$EN;

  // register i_cache_dirtyArray_10
  reg i_cache_dirtyArray_10;
  wire i_cache_dirtyArray_10$D_IN, i_cache_dirtyArray_10$EN;

  // register i_cache_dirtyArray_11
  reg i_cache_dirtyArray_11;
  wire i_cache_dirtyArray_11$D_IN, i_cache_dirtyArray_11$EN;

  // register i_cache_dirtyArray_12
  reg i_cache_dirtyArray_12;
  wire i_cache_dirtyArray_12$D_IN, i_cache_dirtyArray_12$EN;

  // register i_cache_dirtyArray_13
  reg i_cache_dirtyArray_13;
  wire i_cache_dirtyArray_13$D_IN, i_cache_dirtyArray_13$EN;

  // register i_cache_dirtyArray_14
  reg i_cache_dirtyArray_14;
  wire i_cache_dirtyArray_14$D_IN, i_cache_dirtyArray_14$EN;

  // register i_cache_dirtyArray_15
  reg i_cache_dirtyArray_15;
  wire i_cache_dirtyArray_15$D_IN, i_cache_dirtyArray_15$EN;

  // register i_cache_dirtyArray_2
  reg i_cache_dirtyArray_2;
  wire i_cache_dirtyArray_2$D_IN, i_cache_dirtyArray_2$EN;

  // register i_cache_dirtyArray_3
  reg i_cache_dirtyArray_3;
  wire i_cache_dirtyArray_3$D_IN, i_cache_dirtyArray_3$EN;

  // register i_cache_dirtyArray_4
  reg i_cache_dirtyArray_4;
  wire i_cache_dirtyArray_4$D_IN, i_cache_dirtyArray_4$EN;

  // register i_cache_dirtyArray_5
  reg i_cache_dirtyArray_5;
  wire i_cache_dirtyArray_5$D_IN, i_cache_dirtyArray_5$EN;

  // register i_cache_dirtyArray_6
  reg i_cache_dirtyArray_6;
  wire i_cache_dirtyArray_6$D_IN, i_cache_dirtyArray_6$EN;

  // register i_cache_dirtyArray_7
  reg i_cache_dirtyArray_7;
  wire i_cache_dirtyArray_7$D_IN, i_cache_dirtyArray_7$EN;

  // register i_cache_dirtyArray_8
  reg i_cache_dirtyArray_8;
  wire i_cache_dirtyArray_8$D_IN, i_cache_dirtyArray_8$EN;

  // register i_cache_dirtyArray_9
  reg i_cache_dirtyArray_9;
  wire i_cache_dirtyArray_9$D_IN, i_cache_dirtyArray_9$EN;

  // register i_cache_hitCount
  reg [31 : 0] i_cache_hitCount;
  wire [31 : 0] i_cache_hitCount$D_IN;
  wire i_cache_hitCount$EN;

  // register i_cache_hitQ_rv
  reg [65 : 0] i_cache_hitQ_rv;
  wire [65 : 0] i_cache_hitQ_rv$D_IN;
  wire i_cache_hitQ_rv$EN;

  // register i_cache_missCount
  reg [31 : 0] i_cache_missCount;
  wire [31 : 0] i_cache_missCount$D_IN;
  wire i_cache_missCount$EN;

  // register i_cache_missReq
  reg [97 : 0] i_cache_missReq;
  wire [97 : 0] i_cache_missReq$D_IN;
  wire i_cache_missReq$EN;

  // register i_cache_mshr_register
  reg [2 : 0] i_cache_mshr_register;
  wire [2 : 0] i_cache_mshr_register$D_IN;
  wire i_cache_mshr_register$EN;

  // register i_cache_tagArray_0
  reg [21 : 0] i_cache_tagArray_0;
  wire [21 : 0] i_cache_tagArray_0$D_IN;
  wire i_cache_tagArray_0$EN;

  // register i_cache_tagArray_1
  reg [21 : 0] i_cache_tagArray_1;
  wire [21 : 0] i_cache_tagArray_1$D_IN;
  wire i_cache_tagArray_1$EN;

  // register i_cache_tagArray_10
  reg [21 : 0] i_cache_tagArray_10;
  wire [21 : 0] i_cache_tagArray_10$D_IN;
  wire i_cache_tagArray_10$EN;

  // register i_cache_tagArray_11
  reg [21 : 0] i_cache_tagArray_11;
  wire [21 : 0] i_cache_tagArray_11$D_IN;
  wire i_cache_tagArray_11$EN;

  // register i_cache_tagArray_12
  reg [21 : 0] i_cache_tagArray_12;
  wire [21 : 0] i_cache_tagArray_12$D_IN;
  wire i_cache_tagArray_12$EN;

  // register i_cache_tagArray_13
  reg [21 : 0] i_cache_tagArray_13;
  wire [21 : 0] i_cache_tagArray_13$D_IN;
  wire i_cache_tagArray_13$EN;

  // register i_cache_tagArray_14
  reg [21 : 0] i_cache_tagArray_14;
  wire [21 : 0] i_cache_tagArray_14$D_IN;
  wire i_cache_tagArray_14$EN;

  // register i_cache_tagArray_15
  reg [21 : 0] i_cache_tagArray_15;
  wire [21 : 0] i_cache_tagArray_15$D_IN;
  wire i_cache_tagArray_15$EN;

  // register i_cache_tagArray_2
  reg [21 : 0] i_cache_tagArray_2;
  wire [21 : 0] i_cache_tagArray_2$D_IN;
  wire i_cache_tagArray_2$EN;

  // register i_cache_tagArray_3
  reg [21 : 0] i_cache_tagArray_3;
  wire [21 : 0] i_cache_tagArray_3$D_IN;
  wire i_cache_tagArray_3$EN;

  // register i_cache_tagArray_4
  reg [21 : 0] i_cache_tagArray_4;
  wire [21 : 0] i_cache_tagArray_4$D_IN;
  wire i_cache_tagArray_4$EN;

  // register i_cache_tagArray_5
  reg [21 : 0] i_cache_tagArray_5;
  wire [21 : 0] i_cache_tagArray_5$D_IN;
  wire i_cache_tagArray_5$EN;

  // register i_cache_tagArray_6
  reg [21 : 0] i_cache_tagArray_6;
  wire [21 : 0] i_cache_tagArray_6$D_IN;
  wire i_cache_tagArray_6$EN;

  // register i_cache_tagArray_7
  reg [21 : 0] i_cache_tagArray_7;
  wire [21 : 0] i_cache_tagArray_7$D_IN;
  wire i_cache_tagArray_7$EN;

  // register i_cache_tagArray_8
  reg [21 : 0] i_cache_tagArray_8;
  wire [21 : 0] i_cache_tagArray_8$D_IN;
  wire i_cache_tagArray_8$EN;

  // register i_cache_tagArray_9
  reg [21 : 0] i_cache_tagArray_9;
  wire [21 : 0] i_cache_tagArray_9$D_IN;
  wire i_cache_tagArray_9$EN;

  // register i_cache_validArray_0
  reg i_cache_validArray_0;
  wire i_cache_validArray_0$D_IN, i_cache_validArray_0$EN;

  // register i_cache_validArray_1
  reg i_cache_validArray_1;
  wire i_cache_validArray_1$D_IN, i_cache_validArray_1$EN;

  // register i_cache_validArray_10
  reg i_cache_validArray_10;
  wire i_cache_validArray_10$D_IN, i_cache_validArray_10$EN;

  // register i_cache_validArray_11
  reg i_cache_validArray_11;
  wire i_cache_validArray_11$D_IN, i_cache_validArray_11$EN;

  // register i_cache_validArray_12
  reg i_cache_validArray_12;
  wire i_cache_validArray_12$D_IN, i_cache_validArray_12$EN;

  // register i_cache_validArray_13
  reg i_cache_validArray_13;
  wire i_cache_validArray_13$D_IN, i_cache_validArray_13$EN;

  // register i_cache_validArray_14
  reg i_cache_validArray_14;
  wire i_cache_validArray_14$D_IN, i_cache_validArray_14$EN;

  // register i_cache_validArray_15
  reg i_cache_validArray_15;
  wire i_cache_validArray_15$D_IN, i_cache_validArray_15$EN;

  // register i_cache_validArray_2
  reg i_cache_validArray_2;
  wire i_cache_validArray_2$D_IN, i_cache_validArray_2$EN;

  // register i_cache_validArray_3
  reg i_cache_validArray_3;
  wire i_cache_validArray_3$D_IN, i_cache_validArray_3$EN;

  // register i_cache_validArray_4
  reg i_cache_validArray_4;
  wire i_cache_validArray_4$D_IN, i_cache_validArray_4$EN;

  // register i_cache_validArray_5
  reg i_cache_validArray_5;
  wire i_cache_validArray_5$D_IN, i_cache_validArray_5$EN;

  // register i_cache_validArray_6
  reg i_cache_validArray_6;
  wire i_cache_validArray_6$D_IN, i_cache_validArray_6$EN;

  // register i_cache_validArray_7
  reg i_cache_validArray_7;
  wire i_cache_validArray_7$D_IN, i_cache_validArray_7$EN;

  // register i_cache_validArray_8
  reg i_cache_validArray_8;
  wire i_cache_validArray_8$D_IN, i_cache_validArray_8$EN;

  // register i_cache_validArray_9
  reg i_cache_validArray_9;
  wire i_cache_validArray_9$D_IN, i_cache_validArray_9$EN;

  // register ireq
  reg [100 : 0] ireq;
  wire [100 : 0] ireq$D_IN;
  wire ireq$EN;

  // register r
  reg [7 : 0] r;
  wire [7 : 0] r$D_IN;
  wire r$EN;

  // register rcnt
  reg [15 : 0] rcnt;
  wire [15 : 0] rcnt$D_IN;
  wire rcnt$EN;

  // ports of submodule d_cache_cache_data_memory
  reg [511 : 0] d_cache_cache_data_memory$DI;
  reg [3 : 0] d_cache_cache_data_memory$ADDR;
  wire [511 : 0] d_cache_cache_data_memory$DO;
  wire d_cache_cache_data_memory$EN, d_cache_cache_data_memory$WE;

  // ports of submodule d_cache_cache_data_serverAdapter_outData_beforeDeq
  wire d_cache_cache_data_serverAdapter_outData_beforeDeq$D_IN,
       d_cache_cache_data_serverAdapter_outData_beforeDeq$EN,
       d_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT;

  // ports of submodule d_cache_cache_data_serverAdapter_outData_beforeEnq
  wire d_cache_cache_data_serverAdapter_outData_beforeEnq$D_IN,
       d_cache_cache_data_serverAdapter_outData_beforeEnq$EN,
       d_cache_cache_data_serverAdapter_outData_beforeEnq$Q_OUT;

  // ports of submodule d_cache_cache_data_serverAdapter_outData_ff
  wire [511 : 0] d_cache_cache_data_serverAdapter_outData_ff$D_IN,
		 d_cache_cache_data_serverAdapter_outData_ff$D_OUT;
  wire d_cache_cache_data_serverAdapter_outData_ff$CLR,
       d_cache_cache_data_serverAdapter_outData_ff$DEQ,
       d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N,
       d_cache_cache_data_serverAdapter_outData_ff$ENQ,
       d_cache_cache_data_serverAdapter_outData_ff$FULL_N;

  // ports of submodule d_cache_loadOffsetQ
  wire [3 : 0] d_cache_loadOffsetQ$D_IN, d_cache_loadOffsetQ$D_OUT;
  wire d_cache_loadOffsetQ$CLR,
       d_cache_loadOffsetQ$DEQ,
       d_cache_loadOffsetQ$EMPTY_N,
       d_cache_loadOffsetQ$ENQ,
       d_cache_loadOffsetQ$FULL_N;

  // ports of submodule d_cache_lockL1_readBeforeLaterWrites_0
  wire d_cache_lockL1_readBeforeLaterWrites_0$D_IN,
       d_cache_lockL1_readBeforeLaterWrites_0$EN;

  // ports of submodule d_cache_lockL1_readBeforeLaterWrites_1
  wire d_cache_lockL1_readBeforeLaterWrites_1$D_IN,
       d_cache_lockL1_readBeforeLaterWrites_1$EN;

  // ports of submodule d_cache_memReqQ
  wire [538 : 0] d_cache_memReqQ$D_IN, d_cache_memReqQ$D_OUT;
  wire d_cache_memReqQ$CLR,
       d_cache_memReqQ$DEQ,
       d_cache_memReqQ$EMPTY_N,
       d_cache_memReqQ$ENQ,
       d_cache_memReqQ$FULL_N;

  // ports of submodule d_cache_memRespQ
  wire [511 : 0] d_cache_memRespQ$D_IN, d_cache_memRespQ$D_OUT;
  wire d_cache_memRespQ$CLR,
       d_cache_memRespQ$DEQ,
       d_cache_memRespQ$EMPTY_N,
       d_cache_memRespQ$ENQ,
       d_cache_memRespQ$FULL_N;

  // ports of submodule d_cache_mshr_readBeforeLaterWrites_0
  wire d_cache_mshr_readBeforeLaterWrites_0$D_IN,
       d_cache_mshr_readBeforeLaterWrites_0$EN,
       d_cache_mshr_readBeforeLaterWrites_0$Q_OUT;

  // ports of submodule d_cache_mshr_readBeforeLaterWrites_1
  wire d_cache_mshr_readBeforeLaterWrites_1$D_IN,
       d_cache_mshr_readBeforeLaterWrites_1$EN,
       d_cache_mshr_readBeforeLaterWrites_1$Q_OUT;

  // ports of submodule d_cache_storeQ
  wire [64 : 0] d_cache_storeQ$D_IN, d_cache_storeQ$D_OUT;
  wire d_cache_storeQ$CLR,
       d_cache_storeQ$DEQ,
       d_cache_storeQ$EMPTY_N,
       d_cache_storeQ$ENQ,
       d_cache_storeQ$FULL_N;

  // ports of submodule dram_bram_memory
  wire [511 : 0] dram_bram_memory$DI, dram_bram_memory$DO;
  wire [3 : 0] dram_bram_memory$ADDR;
  wire dram_bram_memory$EN, dram_bram_memory$WE;

  // ports of submodule dram_bram_serverAdapter_outData_beforeDeq
  wire dram_bram_serverAdapter_outData_beforeDeq$D_IN,
       dram_bram_serverAdapter_outData_beforeDeq$EN,
       dram_bram_serverAdapter_outData_beforeDeq$Q_OUT;

  // ports of submodule dram_bram_serverAdapter_outData_beforeEnq
  wire dram_bram_serverAdapter_outData_beforeEnq$D_IN,
       dram_bram_serverAdapter_outData_beforeEnq$EN,
       dram_bram_serverAdapter_outData_beforeEnq$Q_OUT;

  // ports of submodule dram_bram_serverAdapter_outData_ff
  wire [511 : 0] dram_bram_serverAdapter_outData_ff$D_IN,
		 dram_bram_serverAdapter_outData_ff$D_OUT;
  wire dram_bram_serverAdapter_outData_ff$CLR,
       dram_bram_serverAdapter_outData_ff$DEQ,
       dram_bram_serverAdapter_outData_ff$EMPTY_N,
       dram_bram_serverAdapter_outData_ff$ENQ,
       dram_bram_serverAdapter_outData_ff$FULL_N;

  // ports of submodule dram_reqQ
  wire [539 : 0] dram_reqQ$D_IN, dram_reqQ$D_OUT;
  wire dram_reqQ$CLR,
       dram_reqQ$DEQ,
       dram_reqQ$EMPTY_N,
       dram_reqQ$ENQ,
       dram_reqQ$FULL_N;

  // ports of submodule from_host
  wire [7 : 0] from_host$D_IN;
  wire from_host$CLR, from_host$DEQ, from_host$ENQ, from_host$FULL_N;

  // ports of submodule i_cache_cache_data_memory
  reg [511 : 0] i_cache_cache_data_memory$DI;
  wire [511 : 0] i_cache_cache_data_memory$DO;
  wire [3 : 0] i_cache_cache_data_memory$ADDR;
  wire i_cache_cache_data_memory$EN, i_cache_cache_data_memory$WE;

  // ports of submodule i_cache_cache_data_serverAdapter_outData_beforeDeq
  wire i_cache_cache_data_serverAdapter_outData_beforeDeq$D_IN,
       i_cache_cache_data_serverAdapter_outData_beforeDeq$EN,
       i_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT;

  // ports of submodule i_cache_cache_data_serverAdapter_outData_beforeEnq
  wire i_cache_cache_data_serverAdapter_outData_beforeEnq$D_IN,
       i_cache_cache_data_serverAdapter_outData_beforeEnq$EN,
       i_cache_cache_data_serverAdapter_outData_beforeEnq$Q_OUT;

  // ports of submodule i_cache_cache_data_serverAdapter_outData_ff
  wire [511 : 0] i_cache_cache_data_serverAdapter_outData_ff$D_IN,
		 i_cache_cache_data_serverAdapter_outData_ff$D_OUT;
  wire i_cache_cache_data_serverAdapter_outData_ff$CLR,
       i_cache_cache_data_serverAdapter_outData_ff$DEQ,
       i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N,
       i_cache_cache_data_serverAdapter_outData_ff$ENQ,
       i_cache_cache_data_serverAdapter_outData_ff$FULL_N;

  // ports of submodule i_cache_loadOffsetQ
  wire [3 : 0] i_cache_loadOffsetQ$D_IN, i_cache_loadOffsetQ$D_OUT;
  wire i_cache_loadOffsetQ$CLR,
       i_cache_loadOffsetQ$DEQ,
       i_cache_loadOffsetQ$EMPTY_N,
       i_cache_loadOffsetQ$ENQ,
       i_cache_loadOffsetQ$FULL_N;

  // ports of submodule i_cache_memReqQ
  wire [538 : 0] i_cache_memReqQ$D_IN, i_cache_memReqQ$D_OUT;
  wire i_cache_memReqQ$CLR,
       i_cache_memReqQ$DEQ,
       i_cache_memReqQ$EMPTY_N,
       i_cache_memReqQ$ENQ,
       i_cache_memReqQ$FULL_N;

  // ports of submodule i_cache_memRespQ
  wire [511 : 0] i_cache_memRespQ$D_IN, i_cache_memRespQ$D_OUT;
  wire i_cache_memRespQ$CLR,
       i_cache_memRespQ$DEQ,
       i_cache_memRespQ$EMPTY_N,
       i_cache_memRespQ$ENQ,
       i_cache_memRespQ$FULL_N;

  // ports of submodule i_cache_mshr_readBeforeLaterWrites_0
  wire i_cache_mshr_readBeforeLaterWrites_0$D_IN,
       i_cache_mshr_readBeforeLaterWrites_0$EN,
       i_cache_mshr_readBeforeLaterWrites_0$Q_OUT;

  // ports of submodule i_cache_mshr_readBeforeLaterWrites_1
  wire i_cache_mshr_readBeforeLaterWrites_1$D_IN,
       i_cache_mshr_readBeforeLaterWrites_1$EN,
       i_cache_mshr_readBeforeLaterWrites_1$Q_OUT;

  // ports of submodule mmioreq
  wire [67 : 0] mmioreq$D_IN, mmioreq$D_OUT;
  wire mmioreq$CLR, mmioreq$DEQ, mmioreq$EMPTY_N, mmioreq$ENQ, mmioreq$FULL_N;

  // ports of submodule rv_core
  wire [100 : 0] rv_core$getIReq, rv_core$getIResp_a;
  wire [67 : 0] rv_core$getDReq,
		rv_core$getDResp_a,
		rv_core$getMMIOReq,
		rv_core$getMMIOResp_a;
  wire rv_core$EN_getDReq,
       rv_core$EN_getDResp,
       rv_core$EN_getIReq,
       rv_core$EN_getIResp,
       rv_core$EN_getMMIOReq,
       rv_core$EN_getMMIOResp,
       rv_core$RDY_getDReq,
       rv_core$RDY_getDResp,
       rv_core$RDY_getIReq,
       rv_core$RDY_getIResp,
       rv_core$RDY_getMMIOReq,
       rv_core$RDY_getMMIOResp;

  // ports of submodule to_host
  wire [7 : 0] to_host$D_IN, to_host$D_OUT;
  wire to_host$CLR, to_host$DEQ, to_host$EMPTY_N, to_host$ENQ, to_host$FULL_N;

  // ports of submodule usb_core
  wire [7 : 0] usb_core$uart_in_data, usb_core$uart_out_data;
  wire usb_core$pin_usb_n,
       usb_core$pin_usb_p,
       usb_core$reset,
       usb_core$uart_in_ready,
       usb_core$uart_in_valid,
       usb_core$uart_out_ready,
       usb_core$uart_out_valid;

  // rule scheduling signals
  wire CAN_FIRE_RL_requestD,
       WILL_FIRE_RL_connectDCacheDram,
       WILL_FIRE_RL_connectICacheDram,
       WILL_FIRE_RL_d_cache_bram_to_hitQ,
       WILL_FIRE_RL_d_cache_cache_data_serverAdapter_overRun,
       WILL_FIRE_RL_d_cache_sendFillReq,
       WILL_FIRE_RL_d_cache_startMiss_BRAMReq,
       WILL_FIRE_RL_d_cache_startMiss_BRAMResp,
       WILL_FIRE_RL_d_cache_waitFillResp,
       WILL_FIRE_RL_d_cache_waitStore,
       WILL_FIRE_RL_dram_bram_serverAdapter_overRun,
       WILL_FIRE_RL_dram_deq1,
       WILL_FIRE_RL_dram_deq2,
       WILL_FIRE_RL_i_cache_bram_to_hitQ,
       WILL_FIRE_RL_i_cache_cache_data_serverAdapter_overRun,
       WILL_FIRE_RL_i_cache_sendFillReq,
       WILL_FIRE_RL_i_cache_startMiss_BRAMReq,
       WILL_FIRE_RL_i_cache_startMiss_BRAMResp,
       WILL_FIRE_RL_i_cache_waitFillResp,
       WILL_FIRE_RL_requestD,
       WILL_FIRE_RL_requestI;

  // inputs to muxes for submodule ports
  wire [539 : 0] MUX_dram_reqQ$enq_1__VAL_1, MUX_dram_reqQ$enq_1__VAL_2;
  wire [538 : 0] MUX_d_cache_memReqQ$enq_1__VAL_1,
		 MUX_d_cache_memReqQ$enq_1__VAL_2,
		 MUX_i_cache_memReqQ$enq_1__VAL_1,
		 MUX_i_cache_memReqQ$enq_1__VAL_2;
  wire [511 : 0] MUX_d_cache_cache_data_memory$put_3__VAL_3,
		 MUX_d_cache_cache_data_memory$put_3__VAL_4;
  wire [65 : 0] MUX_i_cache_hitQ_rv$port0__write_1__VAL_1,
		MUX_i_cache_hitQ_rv$port0__write_1__VAL_2;
  wire [32 : 0] MUX_d_cache_hitQ_rv$port0__write_1__VAL_1,
		MUX_d_cache_hitQ_rv$port0__write_1__VAL_2;
  wire [2 : 0] MUX_d_cache_mshr_port_0$wset_1__VAL_1,
	       MUX_d_cache_mshr_port_0$wset_1__VAL_2,
	       MUX_d_cache_mshr_port_0$wset_1__VAL_3,
	       MUX_d_cache_mshr_port_0$wset_1__VAL_4,
	       MUX_i_cache_mshr_port_0$wset_1__VAL_1,
	       MUX_i_cache_mshr_port_0$wset_1__VAL_2,
	       MUX_i_cache_mshr_port_0$wset_1__VAL_3,
	       MUX_i_cache_mshr_port_0$wset_1__VAL_4;
  wire [1 : 0] MUX_dram_bram_serverAdapter_writeWithResp$wset_1__VAL_1,
	       MUX_dram_bram_serverAdapter_writeWithResp$wset_1__VAL_2;
  wire MUX_d_cache_cache_data_memory$put_1__SEL_1,
       MUX_d_cache_cache_data_memory$put_1__SEL_2,
       MUX_d_cache_dirtyArray_0$write_1__SEL_1,
       MUX_d_cache_dirtyArray_0$write_1__VAL_1,
       MUX_d_cache_dirtyArray_1$write_1__SEL_1,
       MUX_d_cache_dirtyArray_1$write_1__VAL_1,
       MUX_d_cache_dirtyArray_10$write_1__SEL_1,
       MUX_d_cache_dirtyArray_10$write_1__VAL_1,
       MUX_d_cache_dirtyArray_11$write_1__SEL_1,
       MUX_d_cache_dirtyArray_11$write_1__VAL_1,
       MUX_d_cache_dirtyArray_12$write_1__SEL_1,
       MUX_d_cache_dirtyArray_12$write_1__VAL_1,
       MUX_d_cache_dirtyArray_13$write_1__SEL_1,
       MUX_d_cache_dirtyArray_13$write_1__VAL_1,
       MUX_d_cache_dirtyArray_14$write_1__SEL_1,
       MUX_d_cache_dirtyArray_14$write_1__VAL_1,
       MUX_d_cache_dirtyArray_15$write_1__SEL_1,
       MUX_d_cache_dirtyArray_15$write_1__VAL_1,
       MUX_d_cache_dirtyArray_2$write_1__SEL_1,
       MUX_d_cache_dirtyArray_2$write_1__VAL_1,
       MUX_d_cache_dirtyArray_3$write_1__SEL_1,
       MUX_d_cache_dirtyArray_3$write_1__VAL_1,
       MUX_d_cache_dirtyArray_4$write_1__SEL_1,
       MUX_d_cache_dirtyArray_4$write_1__VAL_1,
       MUX_d_cache_dirtyArray_5$write_1__SEL_1,
       MUX_d_cache_dirtyArray_5$write_1__VAL_1,
       MUX_d_cache_dirtyArray_6$write_1__SEL_1,
       MUX_d_cache_dirtyArray_6$write_1__VAL_1,
       MUX_d_cache_dirtyArray_7$write_1__SEL_1,
       MUX_d_cache_dirtyArray_7$write_1__VAL_1,
       MUX_d_cache_dirtyArray_8$write_1__SEL_1,
       MUX_d_cache_dirtyArray_8$write_1__VAL_1,
       MUX_d_cache_dirtyArray_9$write_1__SEL_1,
       MUX_d_cache_dirtyArray_9$write_1__VAL_1,
       MUX_d_cache_hitQ_rv$port0__write_1__SEL_1,
       MUX_d_cache_mshr_port_0$wset_1__SEL_1,
       MUX_i_cache_cache_data_memory$put_1__SEL_1,
       MUX_i_cache_cache_data_memory$put_1__SEL_2,
       MUX_i_cache_mshr_port_0$wset_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1,
	       SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565,
	       first_word__h17861,
	       first_word__h29423,
	       second_word___1__h20422,
	       second_word___1__h29518;
  reg [21 : 0] cur_tag__h58264,
	       cur_tag__h61264,
	       old_tag__h24107,
	       old_tag__h48278;
  reg [7 : 0] CASE_rv_coregetMMIOReq_BITS_31_TO_0_0_48_1_49_ETC__q2;
  reg SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588,
      SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608,
      SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916,
      SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300,
      SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320,
      SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878;
  wire [511 : 0] old_data__h24105, old_data__h48276;
  wire [447 : 0] IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d826;
  wire [383 : 0] IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d821;
  wire [319 : 0] IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d816;
  wire [255 : 0] IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d811;
  wire [191 : 0] IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d806;
  wire [127 : 0] IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d801;
  wire [31 : 0] IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d502,
		IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d506,
		IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d510,
		IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d514,
		IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d518,
		IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d522,
		IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d526,
		IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d530,
		IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d534,
		IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d538,
		IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d542,
		IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d546,
		IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d550,
		IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d554,
		IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d558,
		IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d562,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d208,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d212,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d216,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d220,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d224,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d228,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d232,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d236,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d240,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d244,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d248,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d252,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d256,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d260,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d264,
		IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d268;
  wire [25 : 0] old_addr__h24108, old_addr__h48279;
  wire [3 : 0] x__h20426, x__h29522;
  wire [2 : 0] IF_SEL_ARR_d_cache_tagArray_0_27_d_cache_tagAr_ETC___d920,
	       IF_SEL_ARR_d_cache_tagArray_0_27_d_cache_tagAr_ETC___d922,
	       IF_d_cache_mshr_port_0_whas__69_THEN_d_cache_m_ETC___d472,
	       IF_d_cache_mshr_readBeforeLaterWrites_1_read___ETC___d919,
	       IF_i_cache_mshr_port_0_whas__82_THEN_i_cache_m_ETC___d185,
	       d_cache_cache_data_serverAdapter_cnt_30_PLUS_I_ETC___d436,
	       dram_bram_serverAdapter_cnt_7_PLUS_IF_dram_bra_ETC___d23,
	       i_cache_cache_data_serverAdapter_cnt_43_PLUS_I_ETC___d149;
  wire SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d935,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d938,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d941,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d944,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d947,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d950,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d953,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d956,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d959,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d962,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d965,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d968,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d971,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d974,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d977,
       SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d980,
       SEL_ARR_i_cache_tagArray_0_39_i_cache_tagArray_ETC___d877,
       d_cache_cache_data_serverAdapter_cnt_30_SLT_3___d611,
       dram_bram_serverAdapter_cnt_7_SLT_3___d834,
       i_cache_cache_data_serverAdapter_cnt_43_SLT_3___d323,
       reset__h67520;

  // value method pin_pu
  assign pin_pu = 1'd1 ;

  // value method rgb_led0_r
  assign rgb_led0_r = ~(cnt < r) ;

  // value method rgb_led0_g
  assign rgb_led0_g = ~(cnt < g) ;

  // value method rgb_led0_b
  assign rgb_led0_b = ~(cnt < b) ;

  // submodule d_cache_cache_data_memory
  BRAM1 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd4),
	  .DATA_WIDTH(32'd512),
	  .MEMSIZE(5'd16)) d_cache_cache_data_memory(.CLK(pin_clk),
						     .ADDR(d_cache_cache_data_memory$ADDR),
						     .DI(d_cache_cache_data_memory$DI),
						     .WE(d_cache_cache_data_memory$WE),
						     .EN(d_cache_cache_data_memory$EN),
						     .DO(d_cache_cache_data_memory$DO));

  // submodule d_cache_cache_data_serverAdapter_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) d_cache_cache_data_serverAdapter_outData_beforeDeq(.CLK(pin_clk),
									      .D_IN(d_cache_cache_data_serverAdapter_outData_beforeDeq$D_IN),
									      .EN(d_cache_cache_data_serverAdapter_outData_beforeDeq$EN),
									      .Q_OUT(d_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT));

  // submodule d_cache_cache_data_serverAdapter_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) d_cache_cache_data_serverAdapter_outData_beforeEnq(.CLK(pin_clk),
									      .D_IN(d_cache_cache_data_serverAdapter_outData_beforeEnq$D_IN),
									      .EN(d_cache_cache_data_serverAdapter_outData_beforeEnq$EN),
									      .Q_OUT(d_cache_cache_data_serverAdapter_outData_beforeEnq$Q_OUT));

  // submodule d_cache_cache_data_serverAdapter_outData_ff
  SizedFIFO #(.p1width(32'd512),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) d_cache_cache_data_serverAdapter_outData_ff(.RST(usr_btn),
									  .CLK(pin_clk),
									  .D_IN(d_cache_cache_data_serverAdapter_outData_ff$D_IN),
									  .ENQ(d_cache_cache_data_serverAdapter_outData_ff$ENQ),
									  .DEQ(d_cache_cache_data_serverAdapter_outData_ff$DEQ),
									  .CLR(d_cache_cache_data_serverAdapter_outData_ff$CLR),
									  .D_OUT(d_cache_cache_data_serverAdapter_outData_ff$D_OUT),
									  .FULL_N(d_cache_cache_data_serverAdapter_outData_ff$FULL_N),
									  .EMPTY_N(d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N));

  // submodule d_cache_loadOffsetQ
  FIFO1 #(.width(32'd4), .guarded(1'd1)) d_cache_loadOffsetQ(.RST(usr_btn),
							     .CLK(pin_clk),
							     .D_IN(d_cache_loadOffsetQ$D_IN),
							     .ENQ(d_cache_loadOffsetQ$ENQ),
							     .DEQ(d_cache_loadOffsetQ$DEQ),
							     .CLR(d_cache_loadOffsetQ$CLR),
							     .D_OUT(d_cache_loadOffsetQ$D_OUT),
							     .FULL_N(d_cache_loadOffsetQ$FULL_N),
							     .EMPTY_N(d_cache_loadOffsetQ$EMPTY_N));

  // submodule d_cache_lockL1_readBeforeLaterWrites_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) d_cache_lockL1_readBeforeLaterWrites_0(.CLK(pin_clk),
								  .D_IN(d_cache_lockL1_readBeforeLaterWrites_0$D_IN),
								  .EN(d_cache_lockL1_readBeforeLaterWrites_0$EN),
								  .Q_OUT());

  // submodule d_cache_lockL1_readBeforeLaterWrites_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) d_cache_lockL1_readBeforeLaterWrites_1(.CLK(pin_clk),
								  .D_IN(d_cache_lockL1_readBeforeLaterWrites_1$D_IN),
								  .EN(d_cache_lockL1_readBeforeLaterWrites_1$EN),
								  .Q_OUT());

  // submodule d_cache_memReqQ
  FIFO1 #(.width(32'd539), .guarded(1'd1)) d_cache_memReqQ(.RST(usr_btn),
							   .CLK(pin_clk),
							   .D_IN(d_cache_memReqQ$D_IN),
							   .ENQ(d_cache_memReqQ$ENQ),
							   .DEQ(d_cache_memReqQ$DEQ),
							   .CLR(d_cache_memReqQ$CLR),
							   .D_OUT(d_cache_memReqQ$D_OUT),
							   .FULL_N(d_cache_memReqQ$FULL_N),
							   .EMPTY_N(d_cache_memReqQ$EMPTY_N));

  // submodule d_cache_memRespQ
  FIFO1 #(.width(32'd512), .guarded(1'd1)) d_cache_memRespQ(.RST(usr_btn),
							    .CLK(pin_clk),
							    .D_IN(d_cache_memRespQ$D_IN),
							    .ENQ(d_cache_memRespQ$ENQ),
							    .DEQ(d_cache_memRespQ$DEQ),
							    .CLR(d_cache_memRespQ$CLR),
							    .D_OUT(d_cache_memRespQ$D_OUT),
							    .FULL_N(d_cache_memRespQ$FULL_N),
							    .EMPTY_N(d_cache_memRespQ$EMPTY_N));

  // submodule d_cache_mshr_readBeforeLaterWrites_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) d_cache_mshr_readBeforeLaterWrites_0(.CLK(pin_clk),
								.D_IN(d_cache_mshr_readBeforeLaterWrites_0$D_IN),
								.EN(d_cache_mshr_readBeforeLaterWrites_0$EN),
								.Q_OUT(d_cache_mshr_readBeforeLaterWrites_0$Q_OUT));

  // submodule d_cache_mshr_readBeforeLaterWrites_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) d_cache_mshr_readBeforeLaterWrites_1(.CLK(pin_clk),
								.D_IN(d_cache_mshr_readBeforeLaterWrites_1$D_IN),
								.EN(d_cache_mshr_readBeforeLaterWrites_1$EN),
								.Q_OUT(d_cache_mshr_readBeforeLaterWrites_1$Q_OUT));

  // submodule d_cache_storeQ
  FIFO1 #(.width(32'd65), .guarded(1'd1)) d_cache_storeQ(.RST(usr_btn),
							 .CLK(pin_clk),
							 .D_IN(d_cache_storeQ$D_IN),
							 .ENQ(d_cache_storeQ$ENQ),
							 .DEQ(d_cache_storeQ$DEQ),
							 .CLR(d_cache_storeQ$CLR),
							 .D_OUT(d_cache_storeQ$D_OUT),
							 .FULL_N(d_cache_storeQ$FULL_N),
							 .EMPTY_N(d_cache_storeQ$EMPTY_N));

  // submodule dram_bram_memory
  BRAM1Load #(.FILENAME("mem.vmh"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd4),
	      .DATA_WIDTH(32'd512),
	      .MEMSIZE(5'd16),
	      .BINARY(1'd0)) dram_bram_memory(.CLK(pin_clk),
					      .ADDR(dram_bram_memory$ADDR),
					      .DI(dram_bram_memory$DI),
					      .WE(dram_bram_memory$WE),
					      .EN(dram_bram_memory$EN),
					      .DO(dram_bram_memory$DO));

  // submodule dram_bram_serverAdapter_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dram_bram_serverAdapter_outData_beforeDeq(.CLK(pin_clk),
								     .D_IN(dram_bram_serverAdapter_outData_beforeDeq$D_IN),
								     .EN(dram_bram_serverAdapter_outData_beforeDeq$EN),
								     .Q_OUT(dram_bram_serverAdapter_outData_beforeDeq$Q_OUT));

  // submodule dram_bram_serverAdapter_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dram_bram_serverAdapter_outData_beforeEnq(.CLK(pin_clk),
								     .D_IN(dram_bram_serverAdapter_outData_beforeEnq$D_IN),
								     .EN(dram_bram_serverAdapter_outData_beforeEnq$EN),
								     .Q_OUT(dram_bram_serverAdapter_outData_beforeEnq$Q_OUT));

  // submodule dram_bram_serverAdapter_outData_ff
  SizedFIFO #(.p1width(32'd512),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) dram_bram_serverAdapter_outData_ff(.RST(usr_btn),
								 .CLK(pin_clk),
								 .D_IN(dram_bram_serverAdapter_outData_ff$D_IN),
								 .ENQ(dram_bram_serverAdapter_outData_ff$ENQ),
								 .DEQ(dram_bram_serverAdapter_outData_ff$DEQ),
								 .CLR(dram_bram_serverAdapter_outData_ff$CLR),
								 .D_OUT(dram_bram_serverAdapter_outData_ff$D_OUT),
								 .FULL_N(dram_bram_serverAdapter_outData_ff$FULL_N),
								 .EMPTY_N(dram_bram_serverAdapter_outData_ff$EMPTY_N));

  // submodule dram_reqQ
  FIFO1 #(.width(32'd540), .guarded(1'd1)) dram_reqQ(.RST(usr_btn),
						     .CLK(pin_clk),
						     .D_IN(dram_reqQ$D_IN),
						     .ENQ(dram_reqQ$ENQ),
						     .DEQ(dram_reqQ$DEQ),
						     .CLR(dram_reqQ$CLR),
						     .D_OUT(dram_reqQ$D_OUT),
						     .FULL_N(dram_reqQ$FULL_N),
						     .EMPTY_N(dram_reqQ$EMPTY_N));

  // submodule from_host
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) from_host(.RST(usr_btn),
					.CLK(pin_clk),
					.D_IN(from_host$D_IN),
					.ENQ(from_host$ENQ),
					.DEQ(from_host$DEQ),
					.CLR(from_host$CLR),
					.D_OUT(),
					.FULL_N(from_host$FULL_N),
					.EMPTY_N());

  // submodule i_cache_cache_data_memory
  BRAM1 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd4),
	  .DATA_WIDTH(32'd512),
	  .MEMSIZE(5'd16)) i_cache_cache_data_memory(.CLK(pin_clk),
						     .ADDR(i_cache_cache_data_memory$ADDR),
						     .DI(i_cache_cache_data_memory$DI),
						     .WE(i_cache_cache_data_memory$WE),
						     .EN(i_cache_cache_data_memory$EN),
						     .DO(i_cache_cache_data_memory$DO));

  // submodule i_cache_cache_data_serverAdapter_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) i_cache_cache_data_serverAdapter_outData_beforeDeq(.CLK(pin_clk),
									      .D_IN(i_cache_cache_data_serverAdapter_outData_beforeDeq$D_IN),
									      .EN(i_cache_cache_data_serverAdapter_outData_beforeDeq$EN),
									      .Q_OUT(i_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT));

  // submodule i_cache_cache_data_serverAdapter_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) i_cache_cache_data_serverAdapter_outData_beforeEnq(.CLK(pin_clk),
									      .D_IN(i_cache_cache_data_serverAdapter_outData_beforeEnq$D_IN),
									      .EN(i_cache_cache_data_serverAdapter_outData_beforeEnq$EN),
									      .Q_OUT(i_cache_cache_data_serverAdapter_outData_beforeEnq$Q_OUT));

  // submodule i_cache_cache_data_serverAdapter_outData_ff
  SizedFIFO #(.p1width(32'd512),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) i_cache_cache_data_serverAdapter_outData_ff(.RST(usr_btn),
									  .CLK(pin_clk),
									  .D_IN(i_cache_cache_data_serverAdapter_outData_ff$D_IN),
									  .ENQ(i_cache_cache_data_serverAdapter_outData_ff$ENQ),
									  .DEQ(i_cache_cache_data_serverAdapter_outData_ff$DEQ),
									  .CLR(i_cache_cache_data_serverAdapter_outData_ff$CLR),
									  .D_OUT(i_cache_cache_data_serverAdapter_outData_ff$D_OUT),
									  .FULL_N(i_cache_cache_data_serverAdapter_outData_ff$FULL_N),
									  .EMPTY_N(i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N));

  // submodule i_cache_loadOffsetQ
  FIFO1 #(.width(32'd4), .guarded(1'd1)) i_cache_loadOffsetQ(.RST(usr_btn),
							     .CLK(pin_clk),
							     .D_IN(i_cache_loadOffsetQ$D_IN),
							     .ENQ(i_cache_loadOffsetQ$ENQ),
							     .DEQ(i_cache_loadOffsetQ$DEQ),
							     .CLR(i_cache_loadOffsetQ$CLR),
							     .D_OUT(i_cache_loadOffsetQ$D_OUT),
							     .FULL_N(i_cache_loadOffsetQ$FULL_N),
							     .EMPTY_N(i_cache_loadOffsetQ$EMPTY_N));

  // submodule i_cache_memReqQ
  FIFO1 #(.width(32'd539), .guarded(1'd1)) i_cache_memReqQ(.RST(usr_btn),
							   .CLK(pin_clk),
							   .D_IN(i_cache_memReqQ$D_IN),
							   .ENQ(i_cache_memReqQ$ENQ),
							   .DEQ(i_cache_memReqQ$DEQ),
							   .CLR(i_cache_memReqQ$CLR),
							   .D_OUT(i_cache_memReqQ$D_OUT),
							   .FULL_N(i_cache_memReqQ$FULL_N),
							   .EMPTY_N(i_cache_memReqQ$EMPTY_N));

  // submodule i_cache_memRespQ
  FIFO1 #(.width(32'd512), .guarded(1'd1)) i_cache_memRespQ(.RST(usr_btn),
							    .CLK(pin_clk),
							    .D_IN(i_cache_memRespQ$D_IN),
							    .ENQ(i_cache_memRespQ$ENQ),
							    .DEQ(i_cache_memRespQ$DEQ),
							    .CLR(i_cache_memRespQ$CLR),
							    .D_OUT(i_cache_memRespQ$D_OUT),
							    .FULL_N(i_cache_memRespQ$FULL_N),
							    .EMPTY_N(i_cache_memRespQ$EMPTY_N));

  // submodule i_cache_mshr_readBeforeLaterWrites_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) i_cache_mshr_readBeforeLaterWrites_0(.CLK(pin_clk),
								.D_IN(i_cache_mshr_readBeforeLaterWrites_0$D_IN),
								.EN(i_cache_mshr_readBeforeLaterWrites_0$EN),
								.Q_OUT(i_cache_mshr_readBeforeLaterWrites_0$Q_OUT));

  // submodule i_cache_mshr_readBeforeLaterWrites_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) i_cache_mshr_readBeforeLaterWrites_1(.CLK(pin_clk),
								.D_IN(i_cache_mshr_readBeforeLaterWrites_1$D_IN),
								.EN(i_cache_mshr_readBeforeLaterWrites_1$EN),
								.Q_OUT(i_cache_mshr_readBeforeLaterWrites_1$Q_OUT));

  // submodule mmioreq
  FIFO1 #(.width(32'd68), .guarded(1'd1)) mmioreq(.RST(usr_btn),
						  .CLK(pin_clk),
						  .D_IN(mmioreq$D_IN),
						  .ENQ(mmioreq$ENQ),
						  .DEQ(mmioreq$DEQ),
						  .CLR(mmioreq$CLR),
						  .D_OUT(mmioreq$D_OUT),
						  .FULL_N(mmioreq$FULL_N),
						  .EMPTY_N(mmioreq$EMPTY_N));

  // submodule rv_core
  mkpipelined rv_core(.CLK(pin_clk),
		      .RST_N(usr_btn),
		      .getDResp_a(rv_core$getDResp_a),
		      .getIResp_a(rv_core$getIResp_a),
		      .getMMIOResp_a(rv_core$getMMIOResp_a),
		      .EN_getIReq(rv_core$EN_getIReq),
		      .EN_getIResp(rv_core$EN_getIResp),
		      .EN_getDReq(rv_core$EN_getDReq),
		      .EN_getDResp(rv_core$EN_getDResp),
		      .EN_getMMIOReq(rv_core$EN_getMMIOReq),
		      .EN_getMMIOResp(rv_core$EN_getMMIOResp),
		      .getPC(),
		      .RDY_getPC(),
		      .getIReq(rv_core$getIReq),
		      .RDY_getIReq(rv_core$RDY_getIReq),
		      .RDY_getIResp(rv_core$RDY_getIResp),
		      .getDReq(rv_core$getDReq),
		      .RDY_getDReq(rv_core$RDY_getDReq),
		      .RDY_getDResp(rv_core$RDY_getDResp),
		      .getMMIOReq(rv_core$getMMIOReq),
		      .RDY_getMMIOReq(rv_core$RDY_getMMIOReq),
		      .RDY_getMMIOResp(rv_core$RDY_getMMIOResp));

  // submodule to_host
  FIFO1 #(.width(32'd8), .guarded(1'd1)) to_host(.RST(usr_btn),
						 .CLK(pin_clk),
						 .D_IN(to_host$D_IN),
						 .ENQ(to_host$ENQ),
						 .DEQ(to_host$DEQ),
						 .CLR(to_host$CLR),
						 .D_OUT(to_host$D_OUT),
						 .FULL_N(to_host$FULL_N),
						 .EMPTY_N(to_host$EMPTY_N));

  // submodule usb_core
  usb_uart usb_core(.clk_48mhz(pin_clk),
		    .reset(usb_core$reset),
		    .uart_in_data(usb_core$uart_in_data),
		    .uart_in_valid(usb_core$uart_in_valid),
		    .uart_out_ready(usb_core$uart_out_ready),
		    .uart_in_ready(usb_core$uart_in_ready),
		    .uart_out_data(usb_core$uart_out_data),
		    .uart_out_valid(usb_core$uart_out_valid),
		    .pin_usb_p(usb_core$pin_usb_p),
		    .pin_usb_n(usb_core$pin_usb_n));

  // rule RL_connectICacheDram
  assign WILL_FIRE_RL_connectICacheDram =
	     dram_bram_serverAdapter_cnt_7_SLT_3___d834 &&
	     i_cache_memReqQ$EMPTY_N &&
	     dram_reqQ$FULL_N ;

  // rule RL_connectDCacheDram
  assign WILL_FIRE_RL_connectDCacheDram =
	     dram_bram_serverAdapter_cnt_7_SLT_3___d834 &&
	     d_cache_memReqQ$EMPTY_N &&
	     dram_reqQ$FULL_N &&
	     !WILL_FIRE_RL_connectICacheDram ;

  // rule RL_dram_bram_serverAdapter_overRun
  assign WILL_FIRE_RL_dram_bram_serverAdapter_overRun =
	     !dram_bram_serverAdapter_outData_beforeEnq$Q_OUT &&
	     dram_bram_serverAdapter_s1[1] ||
	     dram_bram_serverAdapter_s1[1] &&
	     (!dram_bram_serverAdapter_outData_beforeDeq$Q_OUT ||
	      !dram_bram_serverAdapter_outData_ff$FULL_N) ;

  // rule RL_dram_deq1
  assign WILL_FIRE_RL_dram_deq1 =
	     (dram_bram_serverAdapter_outData_ff$EMPTY_N ||
	      dram_bram_serverAdapter_outData_enqw$whas) &&
	     !dram_dl1_d_0_rv$port1__read[512] &&
	     dram_reqQ$D_OUT[0] &&
	     dram_bram_serverAdapter_outData_beforeDeq$Q_OUT &&
	     dram_reqQ$EMPTY_N ;

  // rule RL_dram_deq2
  assign WILL_FIRE_RL_dram_deq2 =
	     (dram_bram_serverAdapter_outData_ff$EMPTY_N ||
	      dram_bram_serverAdapter_outData_enqw$whas) &&
	     !dram_reqQ$D_OUT[0] &&
	     !dram_dl2_d_0_rv$port1__read[512] &&
	     dram_bram_serverAdapter_outData_beforeDeq$Q_OUT &&
	     dram_reqQ$EMPTY_N ;

  // rule RL_i_cache_startMiss_BRAMReq
  assign WILL_FIRE_RL_i_cache_startMiss_BRAMReq =
	     i_cache_mshr_register == 3'd1 &&
	     !SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 ||
	     i_cache_mshr_register == 3'd1 &&
	     !SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 ||
	     i_cache_cache_data_serverAdapter_cnt_43_SLT_3___d323 &&
	     i_cache_mshr_register == 3'd1 ;

  // rule RL_i_cache_sendFillReq
  assign WILL_FIRE_RL_i_cache_sendFillReq =
	     i_cache_mshr_register == 3'd3 && i_cache_memReqQ$FULL_N ;

  // rule RL_i_cache_waitFillResp
  assign WILL_FIRE_RL_i_cache_waitFillResp =
	     i_cache_cache_data_serverAdapter_cnt_43_SLT_3___d323 &&
	     i_cache_mshr_register == 3'd4 &&
	     i_cache_memRespQ$EMPTY_N &&
	     !i_cache_hitQ_rv[65] ;

  // rule RL_i_cache_cache_data_serverAdapter_overRun
  assign WILL_FIRE_RL_i_cache_cache_data_serverAdapter_overRun =
	     !i_cache_cache_data_serverAdapter_outData_beforeEnq$Q_OUT &&
	     i_cache_cache_data_serverAdapter_s1[1] ||
	     i_cache_cache_data_serverAdapter_s1[1] &&
	     (!i_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT ||
	      !i_cache_cache_data_serverAdapter_outData_ff$FULL_N) ;

  // rule RL_i_cache_bram_to_hitQ
  assign WILL_FIRE_RL_i_cache_bram_to_hitQ =
	     i_cache_mshr_register == 3'd5 &&
	     (i_cache_loadOffsetQ$EMPTY_N &&
	      i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N &&
	      !i_cache_hitQ_rv[65] &&
	      i_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT ||
	      i_cache_loadOffsetQ$EMPTY_N &&
	      i_cache_cache_data_serverAdapter_outData_enqw$whas &&
	      !i_cache_hitQ_rv[65] &&
	      i_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT) ;

  // rule RL_i_cache_startMiss_BRAMResp
  assign WILL_FIRE_RL_i_cache_startMiss_BRAMResp =
	     i_cache_mshr_register == 3'd2 &&
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N &&
	     i_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT &&
	     i_cache_memReqQ$FULL_N ||
	     i_cache_mshr_register == 3'd2 &&
	     i_cache_cache_data_serverAdapter_outData_enqw$whas &&
	     i_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT &&
	     i_cache_memReqQ$FULL_N ;

  // rule RL_requestI
  assign WILL_FIRE_RL_requestI =
	     i_cache_cache_data_serverAdapter_cnt_43_SLT_3___d323 &&
	     IF_i_cache_mshr_port_0_whas__82_THEN_i_cache_m_ETC___d185 ==
	     3'd0 &&
	     rv_core$RDY_getIReq &&
	     i_cache_loadOffsetQ$FULL_N &&
	     !WILL_FIRE_RL_i_cache_waitFillResp &&
	     !WILL_FIRE_RL_i_cache_startMiss_BRAMReq ;

  // rule RL_d_cache_startMiss_BRAMReq
  assign WILL_FIRE_RL_d_cache_startMiss_BRAMReq =
	     d_cache_mshr_register == 3'd1 &&
	     !SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 ||
	     d_cache_mshr_register == 3'd1 &&
	     !SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 ||
	     d_cache_cache_data_serverAdapter_cnt_30_SLT_3___d611 &&
	     d_cache_mshr_register == 3'd1 ;

  // rule RL_d_cache_sendFillReq
  assign WILL_FIRE_RL_d_cache_sendFillReq =
	     d_cache_mshr_register == 3'd3 && d_cache_memReqQ$FULL_N ;

  // rule RL_d_cache_waitFillResp
  assign WILL_FIRE_RL_d_cache_waitFillResp =
	     d_cache_cache_data_serverAdapter_cnt_30_SLT_3___d611 &&
	     d_cache_mshr_register == 3'd4 &&
	     d_cache_memRespQ$EMPTY_N &&
	     !d_cache_hitQ_rv[32] ||
	     d_cache_cache_data_serverAdapter_cnt_30_SLT_3___d611 &&
	     d_cache_mshr_register == 3'd4 &&
	     d_cache_memRespQ$EMPTY_N &&
	     d_cache_missReq[64] ;

  // rule RL_d_cache_cache_data_serverAdapter_overRun
  assign WILL_FIRE_RL_d_cache_cache_data_serverAdapter_overRun =
	     !d_cache_cache_data_serverAdapter_outData_beforeEnq$Q_OUT &&
	     d_cache_cache_data_serverAdapter_s1[1] ||
	     d_cache_cache_data_serverAdapter_s1[1] &&
	     (!d_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT ||
	      !d_cache_cache_data_serverAdapter_outData_ff$FULL_N) ;

  // rule RL_d_cache_bram_to_hitQ
  assign WILL_FIRE_RL_d_cache_bram_to_hitQ =
	     d_cache_mshr_register == 3'd5 &&
	     (d_cache_loadOffsetQ$EMPTY_N &&
	      d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N &&
	      !d_cache_hitQ_rv[32] &&
	      d_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT ||
	      d_cache_loadOffsetQ$EMPTY_N &&
	      d_cache_cache_data_serverAdapter_outData_enqw$whas &&
	      !d_cache_hitQ_rv[32] &&
	      d_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT) ;

  // rule RL_d_cache_startMiss_BRAMResp
  assign WILL_FIRE_RL_d_cache_startMiss_BRAMResp =
	     d_cache_mshr_register == 3'd2 &&
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N &&
	     d_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT &&
	     d_cache_memReqQ$FULL_N ||
	     d_cache_mshr_register == 3'd2 &&
	     d_cache_cache_data_serverAdapter_outData_enqw$whas &&
	     d_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT &&
	     d_cache_memReqQ$FULL_N ;

  // rule RL_d_cache_waitStore
  assign WILL_FIRE_RL_d_cache_waitStore =
	     d_cache_cache_data_serverAdapter_cnt_30_SLT_3___d611 &&
	     (d_cache_mshr_register == 3'd6 && d_cache_storeQ$EMPTY_N &&
	      d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N &&
	      d_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT ||
	      d_cache_mshr_register == 3'd6 && d_cache_storeQ$EMPTY_N &&
	      d_cache_cache_data_serverAdapter_outData_enqw$whas &&
	      d_cache_cache_data_serverAdapter_outData_beforeDeq$Q_OUT) ;

  // rule RL_requestD
  assign CAN_FIRE_RL_requestD =
	     d_cache_cache_data_serverAdapter_cnt_30_SLT_3___d611 &&
	     IF_d_cache_mshr_port_0_whas__69_THEN_d_cache_m_ETC___d472 ==
	     3'd0 &&
	     rv_core$RDY_getDReq &&
	     d_cache_storeQ$FULL_N &&
	     d_cache_loadOffsetQ$FULL_N ;
  assign WILL_FIRE_RL_requestD =
	     CAN_FIRE_RL_requestD && !WILL_FIRE_RL_d_cache_waitStore &&
	     !WILL_FIRE_RL_d_cache_waitFillResp &&
	     !WILL_FIRE_RL_d_cache_startMiss_BRAMReq ;

  // inputs to muxes for submodule ports
  assign MUX_d_cache_cache_data_memory$put_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_startMiss_BRAMReq &&
	     SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 ;
  assign MUX_d_cache_cache_data_memory$put_1__SEL_2 =
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 ;
  assign MUX_d_cache_dirtyArray_0$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd0 ;
  assign MUX_d_cache_dirtyArray_1$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd1 ;
  assign MUX_d_cache_dirtyArray_10$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd10 ;
  assign MUX_d_cache_dirtyArray_11$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd11 ;
  assign MUX_d_cache_dirtyArray_12$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd12 ;
  assign MUX_d_cache_dirtyArray_13$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd13 ;
  assign MUX_d_cache_dirtyArray_14$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd14 ;
  assign MUX_d_cache_dirtyArray_15$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd15 ;
  assign MUX_d_cache_dirtyArray_2$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd2 ;
  assign MUX_d_cache_dirtyArray_3$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd3 ;
  assign MUX_d_cache_dirtyArray_4$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd4 ;
  assign MUX_d_cache_dirtyArray_5$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd5 ;
  assign MUX_d_cache_dirtyArray_6$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd6 ;
  assign MUX_d_cache_dirtyArray_7$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd7 ;
  assign MUX_d_cache_dirtyArray_8$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd8 ;
  assign MUX_d_cache_dirtyArray_9$write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd9 ;
  assign MUX_d_cache_hitQ_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitFillResp && !d_cache_missReq[64] ;
  assign MUX_d_cache_mshr_port_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_d_cache_waitStore ||
	     WILL_FIRE_RL_d_cache_waitFillResp ||
	     WILL_FIRE_RL_d_cache_bram_to_hitQ ;
  assign MUX_i_cache_cache_data_memory$put_1__SEL_1 =
	     WILL_FIRE_RL_i_cache_startMiss_BRAMReq &&
	     SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 &&
	     SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 ;
  assign MUX_i_cache_cache_data_memory$put_1__SEL_2 =
	     WILL_FIRE_RL_requestI &&
	     SEL_ARR_i_cache_tagArray_0_39_i_cache_tagArray_ETC___d877 &&
	     SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 ;
  assign MUX_i_cache_mshr_port_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_i_cache_waitFillResp ||
	     WILL_FIRE_RL_i_cache_bram_to_hitQ ;
  assign MUX_d_cache_cache_data_memory$put_3__VAL_3 =
	     d_cache_missReq[64] ?
	       { (d_cache_missReq[37:34] == 4'd15) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[511:480],
		 (d_cache_missReq[37:34] == 4'd14) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[479:448],
		 (d_cache_missReq[37:34] == 4'd13) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[447:416],
		 (d_cache_missReq[37:34] == 4'd12) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[415:384],
		 (d_cache_missReq[37:34] == 4'd11) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[383:352],
		 (d_cache_missReq[37:34] == 4'd10) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[351:320],
		 (d_cache_missReq[37:34] == 4'd9) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[319:288],
		 (d_cache_missReq[37:34] == 4'd8) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[287:256],
		 (d_cache_missReq[37:34] == 4'd7) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[255:224],
		 (d_cache_missReq[37:34] == 4'd6) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[223:192],
		 (d_cache_missReq[37:34] == 4'd5) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[191:160],
		 (d_cache_missReq[37:34] == 4'd4) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[159:128],
		 (d_cache_missReq[37:34] == 4'd3) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[127:96],
		 (d_cache_missReq[37:34] == 4'd2) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[95:64],
		 (d_cache_missReq[37:34] == 4'd1) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[63:32],
		 (d_cache_missReq[37:34] == 4'd0) ?
		   d_cache_missReq[31:0] :
		   d_cache_memRespQ$D_OUT[31:0] } :
	       d_cache_memRespQ$D_OUT ;
  assign MUX_d_cache_cache_data_memory$put_3__VAL_4 =
	     { IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d826,
	       (d_cache_storeQ$D_OUT[37:34] == 4'd1) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d506,
	       (d_cache_storeQ$D_OUT[37:34] == 4'd0) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d502 } ;
  assign MUX_d_cache_dirtyArray_0$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd0 && d_cache_missReq[64] ;
  assign MUX_d_cache_dirtyArray_1$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd1 && d_cache_missReq[64] ;
  assign MUX_d_cache_dirtyArray_10$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd10 && d_cache_missReq[64] ;
  assign MUX_d_cache_dirtyArray_11$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd11 && d_cache_missReq[64] ;
  assign MUX_d_cache_dirtyArray_12$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd12 && d_cache_missReq[64] ;
  assign MUX_d_cache_dirtyArray_13$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd13 && d_cache_missReq[64] ;
  assign MUX_d_cache_dirtyArray_14$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd14 && d_cache_missReq[64] ;
  assign MUX_d_cache_dirtyArray_15$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd15 && d_cache_missReq[64] ;
  assign MUX_d_cache_dirtyArray_2$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd2 && d_cache_missReq[64] ;
  assign MUX_d_cache_dirtyArray_3$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd3 && d_cache_missReq[64] ;
  assign MUX_d_cache_dirtyArray_4$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd4 && d_cache_missReq[64] ;
  assign MUX_d_cache_dirtyArray_5$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd5 && d_cache_missReq[64] ;
  assign MUX_d_cache_dirtyArray_6$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd6 && d_cache_missReq[64] ;
  assign MUX_d_cache_dirtyArray_7$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd7 && d_cache_missReq[64] ;
  assign MUX_d_cache_dirtyArray_8$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd8 && d_cache_missReq[64] ;
  assign MUX_d_cache_dirtyArray_9$write_1__VAL_1 =
	     d_cache_missReq[41:38] == 4'd9 && d_cache_missReq[64] ;
  assign MUX_d_cache_hitQ_rv$port0__write_1__VAL_1 =
	     { 1'd1,
	       CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 } ;
  assign MUX_d_cache_hitQ_rv$port0__write_1__VAL_2 =
	     { 1'd1,
	       SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 } ;
  assign MUX_d_cache_memReqQ$enq_1__VAL_1 =
	     { 1'd1, old_addr__h48279, old_data__h48276 } ;
  assign MUX_d_cache_memReqQ$enq_1__VAL_2 =
	     { 1'd0,
	       d_cache_missReq[63:0],
	       474'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_d_cache_mshr_port_0$wset_1__VAL_1 =
	     d_cache_mshr_readBeforeLaterWrites_0$Q_OUT ?
	       3'd0 :
	       d_cache_mshr_register ;
  assign MUX_d_cache_mshr_port_0$wset_1__VAL_2 =
	     d_cache_mshr_readBeforeLaterWrites_0$Q_OUT ?
	       3'd3 :
	       d_cache_mshr_register ;
  assign MUX_d_cache_mshr_port_0$wset_1__VAL_3 =
	     (SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 &&
	      SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608) ?
	       (d_cache_mshr_readBeforeLaterWrites_0$Q_OUT ?
		  3'd2 :
		  d_cache_mshr_register) :
	       (d_cache_mshr_readBeforeLaterWrites_0$Q_OUT ?
		  3'd3 :
		  d_cache_mshr_register) ;
  assign MUX_d_cache_mshr_port_0$wset_1__VAL_4 =
	     d_cache_mshr_readBeforeLaterWrites_0$Q_OUT ?
	       3'd4 :
	       d_cache_mshr_register ;
  assign MUX_dram_bram_serverAdapter_writeWithResp$wset_1__VAL_1 =
	     { i_cache_memReqQ$D_OUT[538], 1'd0 } ;
  assign MUX_dram_bram_serverAdapter_writeWithResp$wset_1__VAL_2 =
	     { d_cache_memReqQ$D_OUT[538], 1'd0 } ;
  assign MUX_dram_reqQ$enq_1__VAL_1 = { i_cache_memReqQ$D_OUT, 1'd1 } ;
  assign MUX_dram_reqQ$enq_1__VAL_2 = { d_cache_memReqQ$D_OUT, 1'd0 } ;
  assign MUX_i_cache_hitQ_rv$port0__write_1__VAL_1 =
	     { 1'd1,
	       first_word__h17861,
	       i_cache_loadOffsetQ$D_OUT != 4'd15,
	       (i_cache_loadOffsetQ$D_OUT == 4'd15) ?
		 32'd0 :
		 second_word___1__h20422 } ;
  assign MUX_i_cache_hitQ_rv$port0__write_1__VAL_2 =
	     { 1'd1,
	       first_word__h29423,
	       i_cache_missReq[70:67] != 4'd15,
	       (i_cache_missReq[70:67] == 4'd15) ?
		 32'd0 :
		 second_word___1__h29518 } ;
  assign MUX_i_cache_memReqQ$enq_1__VAL_1 =
	     { 1'd1, old_addr__h24108, old_data__h24105 } ;
  assign MUX_i_cache_memReqQ$enq_1__VAL_2 =
	     { 1'd0,
	       i_cache_missReq[96:0],
	       441'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_i_cache_mshr_port_0$wset_1__VAL_1 =
	     i_cache_mshr_readBeforeLaterWrites_0$Q_OUT ?
	       3'd0 :
	       i_cache_mshr_register ;
  assign MUX_i_cache_mshr_port_0$wset_1__VAL_2 =
	     i_cache_mshr_readBeforeLaterWrites_0$Q_OUT ?
	       3'd3 :
	       i_cache_mshr_register ;
  assign MUX_i_cache_mshr_port_0$wset_1__VAL_3 =
	     (SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 &&
	      SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320) ?
	       (i_cache_mshr_readBeforeLaterWrites_0$Q_OUT ?
		  3'd2 :
		  i_cache_mshr_register) :
	       (i_cache_mshr_readBeforeLaterWrites_0$Q_OUT ?
		  3'd3 :
		  i_cache_mshr_register) ;
  assign MUX_i_cache_mshr_port_0$wset_1__VAL_4 =
	     i_cache_mshr_readBeforeLaterWrites_0$Q_OUT ?
	       3'd4 :
	       i_cache_mshr_register ;

  // inlined wires
  assign dram_bram_serverAdapter_outData_enqw$whas =
	     dram_bram_serverAdapter_s1[1] &&
	     (!dram_bram_serverAdapter_s1[0] ||
	      dram_bram_serverAdapter_outData_ff$FULL_N) &&
	     dram_bram_serverAdapter_s1[0] ;
  assign dram_bram_serverAdapter_cnt_1$whas =
	     (WILL_FIRE_RL_connectICacheDram ||
	      WILL_FIRE_RL_connectDCacheDram) &&
	     (!dram_bram_serverAdapter_writeWithResp$wget[1] ||
	      dram_bram_serverAdapter_writeWithResp$wget[0]) ;
  assign dram_bram_serverAdapter_writeWithResp$wget =
	     WILL_FIRE_RL_connectICacheDram ?
	       MUX_dram_bram_serverAdapter_writeWithResp$wset_1__VAL_1 :
	       MUX_dram_bram_serverAdapter_writeWithResp$wset_1__VAL_2 ;
  assign dram_bram_serverAdapter_writeWithResp$whas =
	     WILL_FIRE_RL_connectICacheDram ||
	     WILL_FIRE_RL_connectDCacheDram ;
  assign dram_bram_serverAdapter_s1_1$wget =
	     { 1'd1,
	       !dram_bram_serverAdapter_writeWithResp$wget[1] ||
	       dram_bram_serverAdapter_writeWithResp$wget[0] } ;
  assign i_cache_cache_data_serverAdapter_outData_enqw$whas =
	     i_cache_cache_data_serverAdapter_s1[1] &&
	     (!i_cache_cache_data_serverAdapter_s1[0] ||
	      i_cache_cache_data_serverAdapter_outData_ff$FULL_N) &&
	     i_cache_cache_data_serverAdapter_s1[0] ;
  assign i_cache_cache_data_serverAdapter_cnt_1$whas =
	     (MUX_i_cache_cache_data_memory$put_1__SEL_1 ||
	      MUX_i_cache_cache_data_memory$put_1__SEL_2 ||
	      WILL_FIRE_RL_i_cache_waitFillResp) &&
	     (!i_cache_cache_data_serverAdapter_writeWithResp$wget[1] ||
	      i_cache_cache_data_serverAdapter_writeWithResp$wget[0]) ;
  assign i_cache_cache_data_serverAdapter_writeWithResp$wget =
	     (MUX_i_cache_cache_data_memory$put_1__SEL_1 ||
	      MUX_i_cache_cache_data_memory$put_1__SEL_2) ?
	       2'd0 :
	       2'd2 ;
  assign i_cache_cache_data_serverAdapter_writeWithResp$whas =
	     MUX_i_cache_cache_data_memory$put_1__SEL_1 ||
	     MUX_i_cache_cache_data_memory$put_1__SEL_2 ||
	     WILL_FIRE_RL_i_cache_waitFillResp ;
  assign i_cache_cache_data_serverAdapter_s1_1$wget =
	     { 1'd1,
	       !i_cache_cache_data_serverAdapter_writeWithResp$wget[1] ||
	       i_cache_cache_data_serverAdapter_writeWithResp$wget[0] } ;
  always@(MUX_i_cache_mshr_port_0$wset_1__SEL_1 or
	  MUX_i_cache_mshr_port_0$wset_1__VAL_1 or
	  WILL_FIRE_RL_i_cache_startMiss_BRAMResp or
	  MUX_i_cache_mshr_port_0$wset_1__VAL_2 or
	  WILL_FIRE_RL_i_cache_startMiss_BRAMReq or
	  MUX_i_cache_mshr_port_0$wset_1__VAL_3 or
	  WILL_FIRE_RL_i_cache_sendFillReq or
	  MUX_i_cache_mshr_port_0$wset_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_i_cache_mshr_port_0$wset_1__SEL_1:
	  i_cache_mshr_port_0$wget = MUX_i_cache_mshr_port_0$wset_1__VAL_1;
      WILL_FIRE_RL_i_cache_startMiss_BRAMResp:
	  i_cache_mshr_port_0$wget = MUX_i_cache_mshr_port_0$wset_1__VAL_2;
      WILL_FIRE_RL_i_cache_startMiss_BRAMReq:
	  i_cache_mshr_port_0$wget = MUX_i_cache_mshr_port_0$wset_1__VAL_3;
      WILL_FIRE_RL_i_cache_sendFillReq:
	  i_cache_mshr_port_0$wget = MUX_i_cache_mshr_port_0$wset_1__VAL_4;
      default: i_cache_mshr_port_0$wget = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign i_cache_mshr_port_0$whas =
	     WILL_FIRE_RL_i_cache_waitFillResp ||
	     WILL_FIRE_RL_i_cache_bram_to_hitQ ||
	     WILL_FIRE_RL_i_cache_startMiss_BRAMResp ||
	     WILL_FIRE_RL_i_cache_startMiss_BRAMReq ||
	     WILL_FIRE_RL_i_cache_sendFillReq ;
  assign i_cache_mshr_port_1$wget =
	     (SEL_ARR_i_cache_tagArray_0_39_i_cache_tagArray_ETC___d877 &&
	      SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878) ?
	       (i_cache_mshr_readBeforeLaterWrites_1$Q_OUT ?
		  3'd5 :
		  IF_i_cache_mshr_port_0_whas__82_THEN_i_cache_m_ETC___d185) :
	       (i_cache_mshr_readBeforeLaterWrites_1$Q_OUT ?
		  3'd1 :
		  IF_i_cache_mshr_port_0_whas__82_THEN_i_cache_m_ETC___d185) ;
  assign d_cache_cache_data_serverAdapter_outData_enqw$whas =
	     d_cache_cache_data_serverAdapter_s1[1] &&
	     (!d_cache_cache_data_serverAdapter_s1[0] ||
	      d_cache_cache_data_serverAdapter_outData_ff$FULL_N) &&
	     d_cache_cache_data_serverAdapter_s1[0] ;
  assign d_cache_cache_data_serverAdapter_cnt_1$whas =
	     (MUX_d_cache_cache_data_memory$put_1__SEL_1 ||
	      MUX_d_cache_cache_data_memory$put_1__SEL_2 ||
	      WILL_FIRE_RL_d_cache_waitStore ||
	      WILL_FIRE_RL_d_cache_waitFillResp) &&
	     (!d_cache_cache_data_serverAdapter_writeWithResp$wget[1] ||
	      d_cache_cache_data_serverAdapter_writeWithResp$wget[0]) ;
  assign d_cache_cache_data_serverAdapter_writeWithResp$wget =
	     (MUX_d_cache_cache_data_memory$put_1__SEL_1 ||
	      MUX_d_cache_cache_data_memory$put_1__SEL_2) ?
	       2'd0 :
	       2'd2 ;
  assign d_cache_cache_data_serverAdapter_writeWithResp$whas =
	     MUX_d_cache_cache_data_memory$put_1__SEL_1 ||
	     MUX_d_cache_cache_data_memory$put_1__SEL_2 ||
	     WILL_FIRE_RL_d_cache_waitStore ||
	     WILL_FIRE_RL_d_cache_waitFillResp ;
  assign d_cache_cache_data_serverAdapter_s1_1$wget =
	     { 1'd1,
	       !d_cache_cache_data_serverAdapter_writeWithResp$wget[1] ||
	       d_cache_cache_data_serverAdapter_writeWithResp$wget[0] } ;
  always@(MUX_d_cache_mshr_port_0$wset_1__SEL_1 or
	  MUX_d_cache_mshr_port_0$wset_1__VAL_1 or
	  WILL_FIRE_RL_d_cache_startMiss_BRAMResp or
	  MUX_d_cache_mshr_port_0$wset_1__VAL_2 or
	  WILL_FIRE_RL_d_cache_startMiss_BRAMReq or
	  MUX_d_cache_mshr_port_0$wset_1__VAL_3 or
	  WILL_FIRE_RL_d_cache_sendFillReq or
	  MUX_d_cache_mshr_port_0$wset_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_d_cache_mshr_port_0$wset_1__SEL_1:
	  d_cache_mshr_port_0$wget = MUX_d_cache_mshr_port_0$wset_1__VAL_1;
      WILL_FIRE_RL_d_cache_startMiss_BRAMResp:
	  d_cache_mshr_port_0$wget = MUX_d_cache_mshr_port_0$wset_1__VAL_2;
      WILL_FIRE_RL_d_cache_startMiss_BRAMReq:
	  d_cache_mshr_port_0$wget = MUX_d_cache_mshr_port_0$wset_1__VAL_3;
      WILL_FIRE_RL_d_cache_sendFillReq:
	  d_cache_mshr_port_0$wget = MUX_d_cache_mshr_port_0$wset_1__VAL_4;
      default: d_cache_mshr_port_0$wget = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign d_cache_mshr_port_0$whas =
	     WILL_FIRE_RL_d_cache_waitStore ||
	     WILL_FIRE_RL_d_cache_waitFillResp ||
	     WILL_FIRE_RL_d_cache_bram_to_hitQ ||
	     WILL_FIRE_RL_d_cache_startMiss_BRAMResp ||
	     WILL_FIRE_RL_d_cache_startMiss_BRAMReq ||
	     WILL_FIRE_RL_d_cache_sendFillReq ;
  assign d_cache_mshr_port_1$wget =
	     rv_core$getDReq[64] ?
	       IF_SEL_ARR_d_cache_tagArray_0_27_d_cache_tagAr_ETC___d920 :
	       IF_SEL_ARR_d_cache_tagArray_0_27_d_cache_tagAr_ETC___d922 ;
  assign dram_bram_serverAdapter_outData_dequeueing$whas =
	     WILL_FIRE_RL_dram_deq2 || WILL_FIRE_RL_dram_deq1 ;
  assign i_cache_cache_data_serverAdapter_outData_dequeueing$whas =
	     WILL_FIRE_RL_i_cache_startMiss_BRAMResp ||
	     WILL_FIRE_RL_i_cache_bram_to_hitQ ;
  assign d_cache_cache_data_serverAdapter_outData_dequeueing$whas =
	     WILL_FIRE_RL_d_cache_waitStore ||
	     WILL_FIRE_RL_d_cache_startMiss_BRAMResp ||
	     WILL_FIRE_RL_d_cache_bram_to_hitQ ;
  assign dram_dl1_d_0_rv$EN_port0__write =
	     dram_dl1_d_0_rv[512] && !dram_dl1_d_1_rv$port1__read[512] ;
  assign dram_dl1_d_0_rv$port1__read =
	     dram_dl1_d_0_rv$EN_port0__write ?
	       513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dram_dl1_d_0_rv ;
  assign dram_dl1_d_0_rv$port1__write_1 =
	     { 1'd1,
	       dram_bram_serverAdapter_outData_ff$EMPTY_N ?
		 dram_bram_serverAdapter_outData_ff$D_OUT :
		 dram_bram_memory$DO } ;
  assign dram_dl1_d_0_rv$port2__read =
	     WILL_FIRE_RL_dram_deq1 ?
	       dram_dl1_d_0_rv$port1__write_1 :
	       dram_dl1_d_0_rv$port1__read ;
  assign dram_dl1_d_1_rv$EN_port0__write =
	     dram_dl1_d_1_rv[512] && !dram_dl1_d_2_rv$port1__read[512] ;
  assign dram_dl1_d_1_rv$port1__read =
	     dram_dl1_d_1_rv$EN_port0__write ?
	       513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dram_dl1_d_1_rv ;
  assign dram_dl1_d_1_rv$EN_port1__write =
	     dram_dl1_d_0_rv[512] && !dram_dl1_d_1_rv$port1__read[512] ;
  assign dram_dl1_d_1_rv$port1__write_1 = { 1'd1, dram_dl1_d_0_rv[511:0] } ;
  assign dram_dl1_d_1_rv$port2__read =
	     dram_dl1_d_1_rv$EN_port1__write ?
	       dram_dl1_d_1_rv$port1__write_1 :
	       dram_dl1_d_1_rv$port1__read ;
  assign dram_dl1_d_2_rv$EN_port0__write =
	     dram_dl1_d_2_rv[512] && !dram_dl1_d_3_rv$port1__read[512] ;
  assign dram_dl1_d_2_rv$port1__read =
	     dram_dl1_d_2_rv$EN_port0__write ?
	       513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dram_dl1_d_2_rv ;
  assign dram_dl1_d_2_rv$EN_port1__write =
	     dram_dl1_d_1_rv[512] && !dram_dl1_d_2_rv$port1__read[512] ;
  assign dram_dl1_d_2_rv$port1__write_1 = { 1'd1, dram_dl1_d_1_rv[511:0] } ;
  assign dram_dl1_d_2_rv$port2__read =
	     dram_dl1_d_2_rv$EN_port1__write ?
	       dram_dl1_d_2_rv$port1__write_1 :
	       dram_dl1_d_2_rv$port1__read ;
  assign dram_dl1_d_3_rv$EN_port0__write =
	     i_cache_memRespQ$FULL_N && dram_dl1_d_3_rv[512] ;
  assign dram_dl1_d_3_rv$port1__read =
	     dram_dl1_d_3_rv$EN_port0__write ?
	       513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dram_dl1_d_3_rv ;
  assign dram_dl1_d_3_rv$EN_port1__write =
	     dram_dl1_d_2_rv[512] && !dram_dl1_d_3_rv$port1__read[512] ;
  assign dram_dl1_d_3_rv$port1__write_1 = { 1'd1, dram_dl1_d_2_rv[511:0] } ;
  assign dram_dl1_d_3_rv$port2__read =
	     dram_dl1_d_3_rv$EN_port1__write ?
	       dram_dl1_d_3_rv$port1__write_1 :
	       dram_dl1_d_3_rv$port1__read ;
  assign dram_dl2_d_0_rv$EN_port0__write =
	     dram_dl2_d_0_rv[512] && !dram_dl2_d_1_rv$port1__read[512] ;
  assign dram_dl2_d_0_rv$port1__read =
	     dram_dl2_d_0_rv$EN_port0__write ?
	       513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dram_dl2_d_0_rv ;
  assign dram_dl2_d_0_rv$port2__read =
	     WILL_FIRE_RL_dram_deq2 ?
	       dram_dl1_d_0_rv$port1__write_1 :
	       dram_dl2_d_0_rv$port1__read ;
  assign dram_dl2_d_1_rv$EN_port0__write =
	     dram_dl2_d_1_rv[512] && !dram_dl2_d_2_rv$port1__read[512] ;
  assign dram_dl2_d_1_rv$port1__read =
	     dram_dl2_d_1_rv$EN_port0__write ?
	       513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dram_dl2_d_1_rv ;
  assign dram_dl2_d_1_rv$EN_port1__write =
	     dram_dl2_d_0_rv[512] && !dram_dl2_d_1_rv$port1__read[512] ;
  assign dram_dl2_d_1_rv$port1__write_1 = { 1'd1, dram_dl2_d_0_rv[511:0] } ;
  assign dram_dl2_d_1_rv$port2__read =
	     dram_dl2_d_1_rv$EN_port1__write ?
	       dram_dl2_d_1_rv$port1__write_1 :
	       dram_dl2_d_1_rv$port1__read ;
  assign dram_dl2_d_2_rv$EN_port0__write =
	     dram_dl2_d_2_rv[512] && !dram_dl2_d_3_rv$port1__read[512] ;
  assign dram_dl2_d_2_rv$port1__read =
	     dram_dl2_d_2_rv$EN_port0__write ?
	       513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dram_dl2_d_2_rv ;
  assign dram_dl2_d_2_rv$EN_port1__write =
	     dram_dl2_d_1_rv[512] && !dram_dl2_d_2_rv$port1__read[512] ;
  assign dram_dl2_d_2_rv$port1__write_1 = { 1'd1, dram_dl2_d_1_rv[511:0] } ;
  assign dram_dl2_d_2_rv$port2__read =
	     dram_dl2_d_2_rv$EN_port1__write ?
	       dram_dl2_d_2_rv$port1__write_1 :
	       dram_dl2_d_2_rv$port1__read ;
  assign dram_dl2_d_3_rv$EN_port0__write =
	     d_cache_memRespQ$FULL_N && dram_dl2_d_3_rv[512] ;
  assign dram_dl2_d_3_rv$port1__read =
	     dram_dl2_d_3_rv$EN_port0__write ?
	       513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dram_dl2_d_3_rv ;
  assign dram_dl2_d_3_rv$EN_port1__write =
	     dram_dl2_d_2_rv[512] && !dram_dl2_d_3_rv$port1__read[512] ;
  assign dram_dl2_d_3_rv$port1__write_1 = { 1'd1, dram_dl2_d_2_rv[511:0] } ;
  assign dram_dl2_d_3_rv$port2__read =
	     dram_dl2_d_3_rv$EN_port1__write ?
	       dram_dl2_d_3_rv$port1__write_1 :
	       dram_dl2_d_3_rv$port1__read ;
  assign i_cache_hitQ_rv$EN_port0__write =
	     WILL_FIRE_RL_i_cache_bram_to_hitQ ||
	     WILL_FIRE_RL_i_cache_waitFillResp ;
  assign i_cache_hitQ_rv$port0__write_1 =
	     WILL_FIRE_RL_i_cache_bram_to_hitQ ?
	       MUX_i_cache_hitQ_rv$port0__write_1__VAL_1 :
	       MUX_i_cache_hitQ_rv$port0__write_1__VAL_2 ;
  assign i_cache_hitQ_rv$port1__read =
	     i_cache_hitQ_rv$EN_port0__write ?
	       i_cache_hitQ_rv$port0__write_1 :
	       i_cache_hitQ_rv ;
  assign i_cache_hitQ_rv$EN_port1__write =
	     rv_core$RDY_getIResp && i_cache_hitQ_rv$port1__read[65] ;
  assign i_cache_hitQ_rv$port2__read =
	     i_cache_hitQ_rv$EN_port1__write ?
	       66'h0AAAAAAAAAAAAAAAA :
	       i_cache_hitQ_rv$port1__read ;
  assign d_cache_hitQ_rv$EN_port0__write =
	     WILL_FIRE_RL_d_cache_waitFillResp && !d_cache_missReq[64] ||
	     WILL_FIRE_RL_d_cache_bram_to_hitQ ;
  assign d_cache_hitQ_rv$port0__write_1 =
	     MUX_d_cache_hitQ_rv$port0__write_1__SEL_1 ?
	       MUX_d_cache_hitQ_rv$port0__write_1__VAL_1 :
	       MUX_d_cache_hitQ_rv$port0__write_1__VAL_2 ;
  assign d_cache_hitQ_rv$port1__read =
	     d_cache_hitQ_rv$EN_port0__write ?
	       d_cache_hitQ_rv$port0__write_1 :
	       d_cache_hitQ_rv ;
  assign d_cache_hitQ_rv$EN_port1__write =
	     rv_core$RDY_getDResp && d_cache_hitQ_rv$port1__read[32] ;
  assign d_cache_hitQ_rv$port2__read =
	     d_cache_hitQ_rv$EN_port1__write ?
	       33'h0AAAAAAAA :
	       d_cache_hitQ_rv$port1__read ;

  // register b
  assign b$D_IN = 8'h0 ;
  assign b$EN = 1'b0 ;

  // register cnt
  assign cnt$D_IN = cnt + 8'd1 ;
  assign cnt$EN = 1'd1 ;

  // register cycle_count
  assign cycle_count$D_IN = cycle_count + 24'd1 ;
  assign cycle_count$EN = 1'd1 ;

  // register d_cache_cache_data_serverAdapter_cnt
  assign d_cache_cache_data_serverAdapter_cnt$D_IN =
	     d_cache_cache_data_serverAdapter_cnt_30_PLUS_I_ETC___d436 ;
  assign d_cache_cache_data_serverAdapter_cnt$EN =
	     d_cache_cache_data_serverAdapter_outData_dequeueing$whas ||
	     d_cache_cache_data_serverAdapter_cnt_1$whas ;

  // register d_cache_cache_data_serverAdapter_s1
  assign d_cache_cache_data_serverAdapter_s1$D_IN =
	     d_cache_cache_data_serverAdapter_writeWithResp$whas ?
	       d_cache_cache_data_serverAdapter_s1_1$wget :
	       2'd0 ;
  assign d_cache_cache_data_serverAdapter_s1$EN = 1'd1 ;

  // register d_cache_dirtyArray_0
  assign d_cache_dirtyArray_0$D_IN =
	     !MUX_d_cache_dirtyArray_0$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_0$write_1__VAL_1 ;
  assign d_cache_dirtyArray_0$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd0 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d935 ;

  // register d_cache_dirtyArray_1
  assign d_cache_dirtyArray_1$D_IN =
	     !MUX_d_cache_dirtyArray_1$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_1$write_1__VAL_1 ;
  assign d_cache_dirtyArray_1$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd1 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d938 ;

  // register d_cache_dirtyArray_10
  assign d_cache_dirtyArray_10$D_IN =
	     !MUX_d_cache_dirtyArray_10$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_10$write_1__VAL_1 ;
  assign d_cache_dirtyArray_10$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd10 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d965 ;

  // register d_cache_dirtyArray_11
  assign d_cache_dirtyArray_11$D_IN =
	     !MUX_d_cache_dirtyArray_11$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_11$write_1__VAL_1 ;
  assign d_cache_dirtyArray_11$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd11 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d968 ;

  // register d_cache_dirtyArray_12
  assign d_cache_dirtyArray_12$D_IN =
	     !MUX_d_cache_dirtyArray_12$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_12$write_1__VAL_1 ;
  assign d_cache_dirtyArray_12$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd12 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d971 ;

  // register d_cache_dirtyArray_13
  assign d_cache_dirtyArray_13$D_IN =
	     !MUX_d_cache_dirtyArray_13$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_13$write_1__VAL_1 ;
  assign d_cache_dirtyArray_13$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd13 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d974 ;

  // register d_cache_dirtyArray_14
  assign d_cache_dirtyArray_14$D_IN =
	     !MUX_d_cache_dirtyArray_14$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_14$write_1__VAL_1 ;
  assign d_cache_dirtyArray_14$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd14 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d977 ;

  // register d_cache_dirtyArray_15
  assign d_cache_dirtyArray_15$D_IN =
	     !MUX_d_cache_dirtyArray_15$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_15$write_1__VAL_1 ;
  assign d_cache_dirtyArray_15$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd15 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d980 ;

  // register d_cache_dirtyArray_2
  assign d_cache_dirtyArray_2$D_IN =
	     !MUX_d_cache_dirtyArray_2$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_2$write_1__VAL_1 ;
  assign d_cache_dirtyArray_2$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd2 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d941 ;

  // register d_cache_dirtyArray_3
  assign d_cache_dirtyArray_3$D_IN =
	     !MUX_d_cache_dirtyArray_3$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_3$write_1__VAL_1 ;
  assign d_cache_dirtyArray_3$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd3 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d944 ;

  // register d_cache_dirtyArray_4
  assign d_cache_dirtyArray_4$D_IN =
	     !MUX_d_cache_dirtyArray_4$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_4$write_1__VAL_1 ;
  assign d_cache_dirtyArray_4$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd4 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d947 ;

  // register d_cache_dirtyArray_5
  assign d_cache_dirtyArray_5$D_IN =
	     !MUX_d_cache_dirtyArray_5$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_5$write_1__VAL_1 ;
  assign d_cache_dirtyArray_5$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd5 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d950 ;

  // register d_cache_dirtyArray_6
  assign d_cache_dirtyArray_6$D_IN =
	     !MUX_d_cache_dirtyArray_6$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_6$write_1__VAL_1 ;
  assign d_cache_dirtyArray_6$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd6 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d953 ;

  // register d_cache_dirtyArray_7
  assign d_cache_dirtyArray_7$D_IN =
	     !MUX_d_cache_dirtyArray_7$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_7$write_1__VAL_1 ;
  assign d_cache_dirtyArray_7$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd7 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d956 ;

  // register d_cache_dirtyArray_8
  assign d_cache_dirtyArray_8$D_IN =
	     !MUX_d_cache_dirtyArray_8$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_8$write_1__VAL_1 ;
  assign d_cache_dirtyArray_8$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd8 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d959 ;

  // register d_cache_dirtyArray_9
  assign d_cache_dirtyArray_9$D_IN =
	     !MUX_d_cache_dirtyArray_9$write_1__SEL_1 ||
	     MUX_d_cache_dirtyArray_9$write_1__VAL_1 ;
  assign d_cache_dirtyArray_9$EN =
	     WILL_FIRE_RL_d_cache_waitFillResp &&
	     d_cache_missReq[41:38] == 4'd9 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d962 ;

  // register d_cache_hitCount
  assign d_cache_hitCount$D_IN = d_cache_hitCount + 32'd1 ;
  assign d_cache_hitCount$EN = MUX_d_cache_cache_data_memory$put_1__SEL_2 ;

  // register d_cache_hitQ_rv
  assign d_cache_hitQ_rv$D_IN = d_cache_hitQ_rv$port2__read ;
  assign d_cache_hitQ_rv$EN = 1'b1 ;

  // register d_cache_lockL1_register
  assign d_cache_lockL1_register$D_IN = d_cache_lockL1_register ;
  assign d_cache_lockL1_register$EN = 1'd1 ;

  // register d_cache_missCount
  assign d_cache_missCount$D_IN = d_cache_missCount + 32'd1 ;
  assign d_cache_missCount$EN =
	     WILL_FIRE_RL_requestD &&
	     (!SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 ||
	      !SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916) ;

  // register d_cache_missReq
  assign d_cache_missReq$D_IN = rv_core$getDReq[64:0] ;
  assign d_cache_missReq$EN =
	     WILL_FIRE_RL_requestD &&
	     (!SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 ||
	      !SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916) ;

  // register d_cache_mshr_register
  assign d_cache_mshr_register$D_IN =
	     WILL_FIRE_RL_requestD ?
	       d_cache_mshr_port_1$wget :
	       IF_d_cache_mshr_port_0_whas__69_THEN_d_cache_m_ETC___d472 ;
  assign d_cache_mshr_register$EN = 1'd1 ;

  // register d_cache_tagArray_0
  assign d_cache_tagArray_0$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_0$EN = MUX_d_cache_dirtyArray_0$write_1__SEL_1 ;

  // register d_cache_tagArray_1
  assign d_cache_tagArray_1$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_1$EN = MUX_d_cache_dirtyArray_1$write_1__SEL_1 ;

  // register d_cache_tagArray_10
  assign d_cache_tagArray_10$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_10$EN = MUX_d_cache_dirtyArray_10$write_1__SEL_1 ;

  // register d_cache_tagArray_11
  assign d_cache_tagArray_11$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_11$EN = MUX_d_cache_dirtyArray_11$write_1__SEL_1 ;

  // register d_cache_tagArray_12
  assign d_cache_tagArray_12$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_12$EN = MUX_d_cache_dirtyArray_12$write_1__SEL_1 ;

  // register d_cache_tagArray_13
  assign d_cache_tagArray_13$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_13$EN = MUX_d_cache_dirtyArray_13$write_1__SEL_1 ;

  // register d_cache_tagArray_14
  assign d_cache_tagArray_14$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_14$EN = MUX_d_cache_dirtyArray_14$write_1__SEL_1 ;

  // register d_cache_tagArray_15
  assign d_cache_tagArray_15$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_15$EN = MUX_d_cache_dirtyArray_15$write_1__SEL_1 ;

  // register d_cache_tagArray_2
  assign d_cache_tagArray_2$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_2$EN = MUX_d_cache_dirtyArray_2$write_1__SEL_1 ;

  // register d_cache_tagArray_3
  assign d_cache_tagArray_3$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_3$EN = MUX_d_cache_dirtyArray_3$write_1__SEL_1 ;

  // register d_cache_tagArray_4
  assign d_cache_tagArray_4$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_4$EN = MUX_d_cache_dirtyArray_4$write_1__SEL_1 ;

  // register d_cache_tagArray_5
  assign d_cache_tagArray_5$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_5$EN = MUX_d_cache_dirtyArray_5$write_1__SEL_1 ;

  // register d_cache_tagArray_6
  assign d_cache_tagArray_6$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_6$EN = MUX_d_cache_dirtyArray_6$write_1__SEL_1 ;

  // register d_cache_tagArray_7
  assign d_cache_tagArray_7$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_7$EN = MUX_d_cache_dirtyArray_7$write_1__SEL_1 ;

  // register d_cache_tagArray_8
  assign d_cache_tagArray_8$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_8$EN = MUX_d_cache_dirtyArray_8$write_1__SEL_1 ;

  // register d_cache_tagArray_9
  assign d_cache_tagArray_9$D_IN = d_cache_missReq[63:42] ;
  assign d_cache_tagArray_9$EN = MUX_d_cache_dirtyArray_9$write_1__SEL_1 ;

  // register d_cache_validArray_0
  assign d_cache_validArray_0$D_IN = 1'd1 ;
  assign d_cache_validArray_0$EN = MUX_d_cache_dirtyArray_0$write_1__SEL_1 ;

  // register d_cache_validArray_1
  assign d_cache_validArray_1$D_IN = 1'd1 ;
  assign d_cache_validArray_1$EN = MUX_d_cache_dirtyArray_1$write_1__SEL_1 ;

  // register d_cache_validArray_10
  assign d_cache_validArray_10$D_IN = 1'd1 ;
  assign d_cache_validArray_10$EN = MUX_d_cache_dirtyArray_10$write_1__SEL_1 ;

  // register d_cache_validArray_11
  assign d_cache_validArray_11$D_IN = 1'd1 ;
  assign d_cache_validArray_11$EN = MUX_d_cache_dirtyArray_11$write_1__SEL_1 ;

  // register d_cache_validArray_12
  assign d_cache_validArray_12$D_IN = 1'd1 ;
  assign d_cache_validArray_12$EN = MUX_d_cache_dirtyArray_12$write_1__SEL_1 ;

  // register d_cache_validArray_13
  assign d_cache_validArray_13$D_IN = 1'd1 ;
  assign d_cache_validArray_13$EN = MUX_d_cache_dirtyArray_13$write_1__SEL_1 ;

  // register d_cache_validArray_14
  assign d_cache_validArray_14$D_IN = 1'd1 ;
  assign d_cache_validArray_14$EN = MUX_d_cache_dirtyArray_14$write_1__SEL_1 ;

  // register d_cache_validArray_15
  assign d_cache_validArray_15$D_IN = 1'd1 ;
  assign d_cache_validArray_15$EN = MUX_d_cache_dirtyArray_15$write_1__SEL_1 ;

  // register d_cache_validArray_2
  assign d_cache_validArray_2$D_IN = 1'd1 ;
  assign d_cache_validArray_2$EN = MUX_d_cache_dirtyArray_2$write_1__SEL_1 ;

  // register d_cache_validArray_3
  assign d_cache_validArray_3$D_IN = 1'd1 ;
  assign d_cache_validArray_3$EN = MUX_d_cache_dirtyArray_3$write_1__SEL_1 ;

  // register d_cache_validArray_4
  assign d_cache_validArray_4$D_IN = 1'd1 ;
  assign d_cache_validArray_4$EN = MUX_d_cache_dirtyArray_4$write_1__SEL_1 ;

  // register d_cache_validArray_5
  assign d_cache_validArray_5$D_IN = 1'd1 ;
  assign d_cache_validArray_5$EN = MUX_d_cache_dirtyArray_5$write_1__SEL_1 ;

  // register d_cache_validArray_6
  assign d_cache_validArray_6$D_IN = 1'd1 ;
  assign d_cache_validArray_6$EN = MUX_d_cache_dirtyArray_6$write_1__SEL_1 ;

  // register d_cache_validArray_7
  assign d_cache_validArray_7$D_IN = 1'd1 ;
  assign d_cache_validArray_7$EN = MUX_d_cache_dirtyArray_7$write_1__SEL_1 ;

  // register d_cache_validArray_8
  assign d_cache_validArray_8$D_IN = 1'd1 ;
  assign d_cache_validArray_8$EN = MUX_d_cache_dirtyArray_8$write_1__SEL_1 ;

  // register d_cache_validArray_9
  assign d_cache_validArray_9$D_IN = 1'd1 ;
  assign d_cache_validArray_9$EN = MUX_d_cache_dirtyArray_9$write_1__SEL_1 ;

  // register dram_bram_serverAdapter_cnt
  assign dram_bram_serverAdapter_cnt$D_IN =
	     dram_bram_serverAdapter_cnt_7_PLUS_IF_dram_bra_ETC___d23 ;
  assign dram_bram_serverAdapter_cnt$EN =
	     dram_bram_serverAdapter_outData_dequeueing$whas ||
	     dram_bram_serverAdapter_cnt_1$whas ;

  // register dram_bram_serverAdapter_s1
  assign dram_bram_serverAdapter_s1$D_IN =
	     dram_bram_serverAdapter_writeWithResp$whas ?
	       dram_bram_serverAdapter_s1_1$wget :
	       2'd0 ;
  assign dram_bram_serverAdapter_s1$EN = 1'd1 ;

  // register dram_dl1_d_0_rv
  assign dram_dl1_d_0_rv$D_IN = dram_dl1_d_0_rv$port2__read ;
  assign dram_dl1_d_0_rv$EN = 1'b1 ;

  // register dram_dl1_d_1_rv
  assign dram_dl1_d_1_rv$D_IN = dram_dl1_d_1_rv$port2__read ;
  assign dram_dl1_d_1_rv$EN = 1'b1 ;

  // register dram_dl1_d_2_rv
  assign dram_dl1_d_2_rv$D_IN = dram_dl1_d_2_rv$port2__read ;
  assign dram_dl1_d_2_rv$EN = 1'b1 ;

  // register dram_dl1_d_3_rv
  assign dram_dl1_d_3_rv$D_IN = dram_dl1_d_3_rv$port2__read ;
  assign dram_dl1_d_3_rv$EN = 1'b1 ;

  // register dram_dl2_d_0_rv
  assign dram_dl2_d_0_rv$D_IN = dram_dl2_d_0_rv$port2__read ;
  assign dram_dl2_d_0_rv$EN = 1'b1 ;

  // register dram_dl2_d_1_rv
  assign dram_dl2_d_1_rv$D_IN = dram_dl2_d_1_rv$port2__read ;
  assign dram_dl2_d_1_rv$EN = 1'b1 ;

  // register dram_dl2_d_2_rv
  assign dram_dl2_d_2_rv$D_IN = dram_dl2_d_2_rv$port2__read ;
  assign dram_dl2_d_2_rv$EN = 1'b1 ;

  // register dram_dl2_d_3_rv
  assign dram_dl2_d_3_rv$D_IN = dram_dl2_d_3_rv$port2__read ;
  assign dram_dl2_d_3_rv$EN = 1'b1 ;

  // register dreq
  assign dreq$D_IN = rv_core$getDReq ;
  assign dreq$EN = WILL_FIRE_RL_requestD ;

  // register g
  assign g$D_IN = 8'h0 ;
  assign g$EN = 1'b0 ;

  // register i_cache_cache_data_serverAdapter_cnt
  assign i_cache_cache_data_serverAdapter_cnt$D_IN =
	     i_cache_cache_data_serverAdapter_cnt_43_PLUS_I_ETC___d149 ;
  assign i_cache_cache_data_serverAdapter_cnt$EN =
	     i_cache_cache_data_serverAdapter_outData_dequeueing$whas ||
	     i_cache_cache_data_serverAdapter_cnt_1$whas ;

  // register i_cache_cache_data_serverAdapter_s1
  assign i_cache_cache_data_serverAdapter_s1$D_IN =
	     i_cache_cache_data_serverAdapter_writeWithResp$whas ?
	       i_cache_cache_data_serverAdapter_s1_1$wget :
	       2'd0 ;
  assign i_cache_cache_data_serverAdapter_s1$EN = 1'd1 ;

  // register i_cache_dirtyArray_0
  assign i_cache_dirtyArray_0$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_0$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd0 ;

  // register i_cache_dirtyArray_1
  assign i_cache_dirtyArray_1$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_1$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd1 ;

  // register i_cache_dirtyArray_10
  assign i_cache_dirtyArray_10$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_10$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd10 ;

  // register i_cache_dirtyArray_11
  assign i_cache_dirtyArray_11$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_11$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd11 ;

  // register i_cache_dirtyArray_12
  assign i_cache_dirtyArray_12$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_12$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd12 ;

  // register i_cache_dirtyArray_13
  assign i_cache_dirtyArray_13$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_13$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd13 ;

  // register i_cache_dirtyArray_14
  assign i_cache_dirtyArray_14$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_14$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd14 ;

  // register i_cache_dirtyArray_15
  assign i_cache_dirtyArray_15$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_15$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd15 ;

  // register i_cache_dirtyArray_2
  assign i_cache_dirtyArray_2$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_2$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd2 ;

  // register i_cache_dirtyArray_3
  assign i_cache_dirtyArray_3$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_3$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd3 ;

  // register i_cache_dirtyArray_4
  assign i_cache_dirtyArray_4$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_4$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd4 ;

  // register i_cache_dirtyArray_5
  assign i_cache_dirtyArray_5$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_5$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd5 ;

  // register i_cache_dirtyArray_6
  assign i_cache_dirtyArray_6$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_6$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd6 ;

  // register i_cache_dirtyArray_7
  assign i_cache_dirtyArray_7$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_7$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd7 ;

  // register i_cache_dirtyArray_8
  assign i_cache_dirtyArray_8$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_8$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd8 ;

  // register i_cache_dirtyArray_9
  assign i_cache_dirtyArray_9$D_IN = 1'd0 ;
  assign i_cache_dirtyArray_9$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd9 ;

  // register i_cache_hitCount
  assign i_cache_hitCount$D_IN = i_cache_hitCount + 32'd1 ;
  assign i_cache_hitCount$EN = MUX_i_cache_cache_data_memory$put_1__SEL_2 ;

  // register i_cache_hitQ_rv
  assign i_cache_hitQ_rv$D_IN = i_cache_hitQ_rv$port2__read ;
  assign i_cache_hitQ_rv$EN = 1'b1 ;

  // register i_cache_missCount
  assign i_cache_missCount$D_IN = i_cache_missCount + 32'd1 ;
  assign i_cache_missCount$EN =
	     WILL_FIRE_RL_requestI &&
	     (!SEL_ARR_i_cache_tagArray_0_39_i_cache_tagArray_ETC___d877 ||
	      !SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878) ;

  // register i_cache_missReq
  assign i_cache_missReq$D_IN = rv_core$getIReq[97:0] ;
  assign i_cache_missReq$EN =
	     WILL_FIRE_RL_requestI &&
	     (!SEL_ARR_i_cache_tagArray_0_39_i_cache_tagArray_ETC___d877 ||
	      !SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878) ;

  // register i_cache_mshr_register
  assign i_cache_mshr_register$D_IN =
	     WILL_FIRE_RL_requestI ?
	       i_cache_mshr_port_1$wget :
	       IF_i_cache_mshr_port_0_whas__82_THEN_i_cache_m_ETC___d185 ;
  assign i_cache_mshr_register$EN = 1'd1 ;

  // register i_cache_tagArray_0
  assign i_cache_tagArray_0$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_0$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd0 ;

  // register i_cache_tagArray_1
  assign i_cache_tagArray_1$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_1$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd1 ;

  // register i_cache_tagArray_10
  assign i_cache_tagArray_10$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_10$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd10 ;

  // register i_cache_tagArray_11
  assign i_cache_tagArray_11$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_11$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd11 ;

  // register i_cache_tagArray_12
  assign i_cache_tagArray_12$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_12$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd12 ;

  // register i_cache_tagArray_13
  assign i_cache_tagArray_13$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_13$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd13 ;

  // register i_cache_tagArray_14
  assign i_cache_tagArray_14$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_14$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd14 ;

  // register i_cache_tagArray_15
  assign i_cache_tagArray_15$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_15$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd15 ;

  // register i_cache_tagArray_2
  assign i_cache_tagArray_2$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_2$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd2 ;

  // register i_cache_tagArray_3
  assign i_cache_tagArray_3$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_3$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd3 ;

  // register i_cache_tagArray_4
  assign i_cache_tagArray_4$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_4$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd4 ;

  // register i_cache_tagArray_5
  assign i_cache_tagArray_5$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_5$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd5 ;

  // register i_cache_tagArray_6
  assign i_cache_tagArray_6$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_6$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd6 ;

  // register i_cache_tagArray_7
  assign i_cache_tagArray_7$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_7$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd7 ;

  // register i_cache_tagArray_8
  assign i_cache_tagArray_8$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_8$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd8 ;

  // register i_cache_tagArray_9
  assign i_cache_tagArray_9$D_IN = i_cache_missReq[96:75] ;
  assign i_cache_tagArray_9$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd9 ;

  // register i_cache_validArray_0
  assign i_cache_validArray_0$D_IN = 1'd1 ;
  assign i_cache_validArray_0$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd0 ;

  // register i_cache_validArray_1
  assign i_cache_validArray_1$D_IN = 1'd1 ;
  assign i_cache_validArray_1$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd1 ;

  // register i_cache_validArray_10
  assign i_cache_validArray_10$D_IN = 1'd1 ;
  assign i_cache_validArray_10$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd10 ;

  // register i_cache_validArray_11
  assign i_cache_validArray_11$D_IN = 1'd1 ;
  assign i_cache_validArray_11$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd11 ;

  // register i_cache_validArray_12
  assign i_cache_validArray_12$D_IN = 1'd1 ;
  assign i_cache_validArray_12$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd12 ;

  // register i_cache_validArray_13
  assign i_cache_validArray_13$D_IN = 1'd1 ;
  assign i_cache_validArray_13$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd13 ;

  // register i_cache_validArray_14
  assign i_cache_validArray_14$D_IN = 1'd1 ;
  assign i_cache_validArray_14$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd14 ;

  // register i_cache_validArray_15
  assign i_cache_validArray_15$D_IN = 1'd1 ;
  assign i_cache_validArray_15$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd15 ;

  // register i_cache_validArray_2
  assign i_cache_validArray_2$D_IN = 1'd1 ;
  assign i_cache_validArray_2$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd2 ;

  // register i_cache_validArray_3
  assign i_cache_validArray_3$D_IN = 1'd1 ;
  assign i_cache_validArray_3$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd3 ;

  // register i_cache_validArray_4
  assign i_cache_validArray_4$D_IN = 1'd1 ;
  assign i_cache_validArray_4$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd4 ;

  // register i_cache_validArray_5
  assign i_cache_validArray_5$D_IN = 1'd1 ;
  assign i_cache_validArray_5$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd5 ;

  // register i_cache_validArray_6
  assign i_cache_validArray_6$D_IN = 1'd1 ;
  assign i_cache_validArray_6$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd6 ;

  // register i_cache_validArray_7
  assign i_cache_validArray_7$D_IN = 1'd1 ;
  assign i_cache_validArray_7$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd7 ;

  // register i_cache_validArray_8
  assign i_cache_validArray_8$D_IN = 1'd1 ;
  assign i_cache_validArray_8$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd8 ;

  // register i_cache_validArray_9
  assign i_cache_validArray_9$D_IN = 1'd1 ;
  assign i_cache_validArray_9$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp &&
	     i_cache_missReq[74:71] == 4'd9 ;

  // register ireq
  assign ireq$D_IN = rv_core$getIReq ;
  assign ireq$EN = WILL_FIRE_RL_requestI ;

  // register r
  assign r$D_IN = 8'h0 ;
  assign r$EN = 1'b0 ;

  // register rcnt
  assign rcnt$D_IN = rcnt + { 15'd0, reset__h67520 } ;
  assign rcnt$EN = 1'd1 ;

  // submodule d_cache_cache_data_memory
  always@(MUX_d_cache_cache_data_memory$put_1__SEL_1 or
	  WILL_FIRE_RL_d_cache_waitFillResp or
	  d_cache_missReq or
	  WILL_FIRE_RL_d_cache_waitStore or
	  d_cache_storeQ$D_OUT or
	  MUX_d_cache_cache_data_memory$put_1__SEL_2 or rv_core$getDReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_d_cache_cache_data_memory$put_1__SEL_1 ||
      WILL_FIRE_RL_d_cache_waitFillResp:
	  d_cache_cache_data_memory$ADDR = d_cache_missReq[41:38];
      WILL_FIRE_RL_d_cache_waitStore:
	  d_cache_cache_data_memory$ADDR = d_cache_storeQ$D_OUT[41:38];
      MUX_d_cache_cache_data_memory$put_1__SEL_2:
	  d_cache_cache_data_memory$ADDR = rv_core$getDReq[41:38];
      default: d_cache_cache_data_memory$ADDR =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_d_cache_cache_data_memory$put_1__SEL_1 or
	  MUX_d_cache_cache_data_memory$put_1__SEL_2 or
	  WILL_FIRE_RL_d_cache_waitFillResp or
	  MUX_d_cache_cache_data_memory$put_3__VAL_3 or
	  WILL_FIRE_RL_d_cache_waitStore or
	  MUX_d_cache_cache_data_memory$put_3__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_d_cache_cache_data_memory$put_1__SEL_1:
	  d_cache_cache_data_memory$DI =
	      512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_d_cache_cache_data_memory$put_1__SEL_2:
	  d_cache_cache_data_memory$DI =
	      512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_d_cache_waitFillResp:
	  d_cache_cache_data_memory$DI =
	      MUX_d_cache_cache_data_memory$put_3__VAL_3;
      WILL_FIRE_RL_d_cache_waitStore:
	  d_cache_cache_data_memory$DI =
	      MUX_d_cache_cache_data_memory$put_3__VAL_4;
      default: d_cache_cache_data_memory$DI =
		   512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign d_cache_cache_data_memory$WE =
	     !MUX_d_cache_cache_data_memory$put_1__SEL_1 &&
	     !MUX_d_cache_cache_data_memory$put_1__SEL_2 ;
  assign d_cache_cache_data_memory$EN =
	     WILL_FIRE_RL_d_cache_startMiss_BRAMReq &&
	     SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 ||
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 ||
	     WILL_FIRE_RL_d_cache_waitFillResp ||
	     WILL_FIRE_RL_d_cache_waitStore ;

  // submodule d_cache_cache_data_serverAdapter_outData_beforeDeq
  assign d_cache_cache_data_serverAdapter_outData_beforeDeq$D_IN = 1'd1 ;
  assign d_cache_cache_data_serverAdapter_outData_beforeDeq$EN =
	     d_cache_cache_data_serverAdapter_outData_dequeueing$whas ;

  // submodule d_cache_cache_data_serverAdapter_outData_beforeEnq
  assign d_cache_cache_data_serverAdapter_outData_beforeEnq$D_IN = 1'd1 ;
  assign d_cache_cache_data_serverAdapter_outData_beforeEnq$EN =
	     d_cache_cache_data_serverAdapter_outData_enqw$whas ;

  // submodule d_cache_cache_data_serverAdapter_outData_ff
  assign d_cache_cache_data_serverAdapter_outData_ff$D_IN =
	     d_cache_cache_data_memory$DO ;
  assign d_cache_cache_data_serverAdapter_outData_ff$ENQ =
	     d_cache_cache_data_serverAdapter_outData_enqw$whas &&
	     (!d_cache_cache_data_serverAdapter_outData_dequeueing$whas ||
	      d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N) ;
  assign d_cache_cache_data_serverAdapter_outData_ff$DEQ =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N &&
	     d_cache_cache_data_serverAdapter_outData_dequeueing$whas ;
  assign d_cache_cache_data_serverAdapter_outData_ff$CLR = 1'b0 ;

  // submodule d_cache_loadOffsetQ
  assign d_cache_loadOffsetQ$D_IN = rv_core$getDReq[37:34] ;
  assign d_cache_loadOffsetQ$ENQ =
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     !rv_core$getDReq[64] ;
  assign d_cache_loadOffsetQ$DEQ = WILL_FIRE_RL_d_cache_bram_to_hitQ ;
  assign d_cache_loadOffsetQ$CLR = 1'b0 ;

  // submodule d_cache_lockL1_readBeforeLaterWrites_0
  assign d_cache_lockL1_readBeforeLaterWrites_0$D_IN = 1'b0 ;
  assign d_cache_lockL1_readBeforeLaterWrites_0$EN = 1'b0 ;

  // submodule d_cache_lockL1_readBeforeLaterWrites_1
  assign d_cache_lockL1_readBeforeLaterWrites_1$D_IN = 1'b0 ;
  assign d_cache_lockL1_readBeforeLaterWrites_1$EN = 1'b0 ;

  // submodule d_cache_memReqQ
  assign d_cache_memReqQ$D_IN =
	     WILL_FIRE_RL_d_cache_startMiss_BRAMResp ?
	       MUX_d_cache_memReqQ$enq_1__VAL_1 :
	       MUX_d_cache_memReqQ$enq_1__VAL_2 ;
  assign d_cache_memReqQ$ENQ =
	     WILL_FIRE_RL_d_cache_startMiss_BRAMResp ||
	     WILL_FIRE_RL_d_cache_sendFillReq ;
  assign d_cache_memReqQ$DEQ = WILL_FIRE_RL_connectDCacheDram ;
  assign d_cache_memReqQ$CLR = 1'b0 ;

  // submodule d_cache_memRespQ
  assign d_cache_memRespQ$D_IN = dram_dl2_d_3_rv[511:0] ;
  assign d_cache_memRespQ$ENQ =
	     d_cache_memRespQ$FULL_N && dram_dl2_d_3_rv[512] ;
  assign d_cache_memRespQ$DEQ = WILL_FIRE_RL_d_cache_waitFillResp ;
  assign d_cache_memRespQ$CLR = 1'b0 ;

  // submodule d_cache_mshr_readBeforeLaterWrites_0
  assign d_cache_mshr_readBeforeLaterWrites_0$D_IN = 1'd1 ;
  assign d_cache_mshr_readBeforeLaterWrites_0$EN =
	     WILL_FIRE_RL_d_cache_waitStore ||
	     WILL_FIRE_RL_d_cache_waitFillResp ||
	     WILL_FIRE_RL_d_cache_sendFillReq ||
	     WILL_FIRE_RL_d_cache_startMiss_BRAMResp ||
	     WILL_FIRE_RL_d_cache_startMiss_BRAMReq ||
	     WILL_FIRE_RL_d_cache_bram_to_hitQ ;

  // submodule d_cache_mshr_readBeforeLaterWrites_1
  assign d_cache_mshr_readBeforeLaterWrites_1$D_IN = 1'd1 ;
  assign d_cache_mshr_readBeforeLaterWrites_1$EN = WILL_FIRE_RL_requestD ;

  // submodule d_cache_storeQ
  assign d_cache_storeQ$D_IN = rv_core$getDReq[64:0] ;
  assign d_cache_storeQ$ENQ =
	     WILL_FIRE_RL_requestD &&
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign d_cache_storeQ$DEQ = WILL_FIRE_RL_d_cache_waitStore ;
  assign d_cache_storeQ$CLR = 1'b0 ;

  // submodule dram_bram_memory
  assign dram_bram_memory$ADDR =
	     WILL_FIRE_RL_connectDCacheDram ?
	       d_cache_memReqQ$D_OUT[515:512] :
	       i_cache_memReqQ$D_OUT[515:512] ;
  assign dram_bram_memory$DI =
	     WILL_FIRE_RL_connectDCacheDram ?
	       d_cache_memReqQ$D_OUT[511:0] :
	       i_cache_memReqQ$D_OUT[511:0] ;
  assign dram_bram_memory$WE =
	     WILL_FIRE_RL_connectDCacheDram ?
	       d_cache_memReqQ$D_OUT[538] :
	       i_cache_memReqQ$D_OUT[538] ;
  assign dram_bram_memory$EN =
	     WILL_FIRE_RL_connectDCacheDram ||
	     WILL_FIRE_RL_connectICacheDram ;

  // submodule dram_bram_serverAdapter_outData_beforeDeq
  assign dram_bram_serverAdapter_outData_beforeDeq$D_IN = 1'd1 ;
  assign dram_bram_serverAdapter_outData_beforeDeq$EN =
	     dram_bram_serverAdapter_outData_dequeueing$whas ;

  // submodule dram_bram_serverAdapter_outData_beforeEnq
  assign dram_bram_serverAdapter_outData_beforeEnq$D_IN = 1'd1 ;
  assign dram_bram_serverAdapter_outData_beforeEnq$EN =
	     dram_bram_serverAdapter_outData_enqw$whas ;

  // submodule dram_bram_serverAdapter_outData_ff
  assign dram_bram_serverAdapter_outData_ff$D_IN = dram_bram_memory$DO ;
  assign dram_bram_serverAdapter_outData_ff$ENQ =
	     dram_bram_serverAdapter_outData_enqw$whas &&
	     (!dram_bram_serverAdapter_outData_dequeueing$whas ||
	      dram_bram_serverAdapter_outData_ff$EMPTY_N) ;
  assign dram_bram_serverAdapter_outData_ff$DEQ =
	     dram_bram_serverAdapter_outData_ff$EMPTY_N &&
	     dram_bram_serverAdapter_outData_dequeueing$whas ;
  assign dram_bram_serverAdapter_outData_ff$CLR = 1'b0 ;

  // submodule dram_reqQ
  assign dram_reqQ$D_IN =
	     WILL_FIRE_RL_connectICacheDram ?
	       MUX_dram_reqQ$enq_1__VAL_1 :
	       MUX_dram_reqQ$enq_1__VAL_2 ;
  assign dram_reqQ$ENQ = dram_bram_serverAdapter_writeWithResp$whas ;
  assign dram_reqQ$DEQ = dram_bram_serverAdapter_outData_dequeueing$whas ;
  assign dram_reqQ$CLR = 1'b0 ;

  // submodule from_host
  assign from_host$D_IN = usb_core$uart_out_data ;
  assign from_host$ENQ = from_host$FULL_N && usb_core$uart_out_valid ;
  assign from_host$DEQ = 1'b0 ;
  assign from_host$CLR = 1'b0 ;

  // submodule i_cache_cache_data_memory
  assign i_cache_cache_data_memory$ADDR =
	     (MUX_i_cache_cache_data_memory$put_1__SEL_1 ||
	      WILL_FIRE_RL_i_cache_waitFillResp) ?
	       i_cache_missReq[74:71] :
	       rv_core$getIReq[74:71] ;
  always@(MUX_i_cache_cache_data_memory$put_1__SEL_1 or
	  MUX_i_cache_cache_data_memory$put_1__SEL_2 or
	  WILL_FIRE_RL_i_cache_waitFillResp or i_cache_memRespQ$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_i_cache_cache_data_memory$put_1__SEL_1:
	  i_cache_cache_data_memory$DI =
	      512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_i_cache_cache_data_memory$put_1__SEL_2:
	  i_cache_cache_data_memory$DI =
	      512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_i_cache_waitFillResp:
	  i_cache_cache_data_memory$DI = i_cache_memRespQ$D_OUT;
      default: i_cache_cache_data_memory$DI =
		   512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign i_cache_cache_data_memory$WE =
	     !MUX_i_cache_cache_data_memory$put_1__SEL_1 &&
	     !MUX_i_cache_cache_data_memory$put_1__SEL_2 ;
  assign i_cache_cache_data_memory$EN =
	     WILL_FIRE_RL_i_cache_startMiss_BRAMReq &&
	     SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 &&
	     SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 ||
	     WILL_FIRE_RL_requestI &&
	     SEL_ARR_i_cache_tagArray_0_39_i_cache_tagArray_ETC___d877 &&
	     SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 ||
	     WILL_FIRE_RL_i_cache_waitFillResp ;

  // submodule i_cache_cache_data_serverAdapter_outData_beforeDeq
  assign i_cache_cache_data_serverAdapter_outData_beforeDeq$D_IN = 1'd1 ;
  assign i_cache_cache_data_serverAdapter_outData_beforeDeq$EN =
	     i_cache_cache_data_serverAdapter_outData_dequeueing$whas ;

  // submodule i_cache_cache_data_serverAdapter_outData_beforeEnq
  assign i_cache_cache_data_serverAdapter_outData_beforeEnq$D_IN = 1'd1 ;
  assign i_cache_cache_data_serverAdapter_outData_beforeEnq$EN =
	     i_cache_cache_data_serverAdapter_outData_enqw$whas ;

  // submodule i_cache_cache_data_serverAdapter_outData_ff
  assign i_cache_cache_data_serverAdapter_outData_ff$D_IN =
	     i_cache_cache_data_memory$DO ;
  assign i_cache_cache_data_serverAdapter_outData_ff$ENQ =
	     i_cache_cache_data_serverAdapter_outData_enqw$whas &&
	     (!i_cache_cache_data_serverAdapter_outData_dequeueing$whas ||
	      i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N) ;
  assign i_cache_cache_data_serverAdapter_outData_ff$DEQ =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N &&
	     i_cache_cache_data_serverAdapter_outData_dequeueing$whas ;
  assign i_cache_cache_data_serverAdapter_outData_ff$CLR = 1'b0 ;

  // submodule i_cache_loadOffsetQ
  assign i_cache_loadOffsetQ$D_IN = rv_core$getIReq[70:67] ;
  assign i_cache_loadOffsetQ$ENQ =
	     MUX_i_cache_cache_data_memory$put_1__SEL_2 ;
  assign i_cache_loadOffsetQ$DEQ = WILL_FIRE_RL_i_cache_bram_to_hitQ ;
  assign i_cache_loadOffsetQ$CLR = 1'b0 ;

  // submodule i_cache_memReqQ
  assign i_cache_memReqQ$D_IN =
	     WILL_FIRE_RL_i_cache_startMiss_BRAMResp ?
	       MUX_i_cache_memReqQ$enq_1__VAL_1 :
	       MUX_i_cache_memReqQ$enq_1__VAL_2 ;
  assign i_cache_memReqQ$ENQ =
	     WILL_FIRE_RL_i_cache_startMiss_BRAMResp ||
	     WILL_FIRE_RL_i_cache_sendFillReq ;
  assign i_cache_memReqQ$DEQ = WILL_FIRE_RL_connectICacheDram ;
  assign i_cache_memReqQ$CLR = 1'b0 ;

  // submodule i_cache_memRespQ
  assign i_cache_memRespQ$D_IN = dram_dl1_d_3_rv[511:0] ;
  assign i_cache_memRespQ$ENQ =
	     i_cache_memRespQ$FULL_N && dram_dl1_d_3_rv[512] ;
  assign i_cache_memRespQ$DEQ = WILL_FIRE_RL_i_cache_waitFillResp ;
  assign i_cache_memRespQ$CLR = 1'b0 ;

  // submodule i_cache_mshr_readBeforeLaterWrites_0
  assign i_cache_mshr_readBeforeLaterWrites_0$D_IN = 1'd1 ;
  assign i_cache_mshr_readBeforeLaterWrites_0$EN =
	     WILL_FIRE_RL_i_cache_waitFillResp ||
	     WILL_FIRE_RL_i_cache_sendFillReq ||
	     WILL_FIRE_RL_i_cache_startMiss_BRAMResp ||
	     WILL_FIRE_RL_i_cache_startMiss_BRAMReq ||
	     WILL_FIRE_RL_i_cache_bram_to_hitQ ;

  // submodule i_cache_mshr_readBeforeLaterWrites_1
  assign i_cache_mshr_readBeforeLaterWrites_1$D_IN = 1'd1 ;
  assign i_cache_mshr_readBeforeLaterWrites_1$EN = WILL_FIRE_RL_requestI ;

  // submodule mmioreq
  assign mmioreq$D_IN = rv_core$getMMIOReq ;
  assign mmioreq$ENQ =
	     mmioreq$FULL_N && to_host$FULL_N && rv_core$RDY_getMMIOReq ;
  assign mmioreq$DEQ = mmioreq$EMPTY_N && rv_core$RDY_getMMIOResp ;
  assign mmioreq$CLR = 1'b0 ;

  // submodule rv_core
  assign rv_core$getDResp_a =
	     { dreq[67:32], d_cache_hitQ_rv$port1__read[31:0] } ;
  assign rv_core$getIResp_a =
	     { ireq[100:65], i_cache_hitQ_rv$port1__read[64:0] } ;
  assign rv_core$getMMIOResp_a = mmioreq$D_OUT ;
  assign rv_core$EN_getIReq = WILL_FIRE_RL_requestI ;
  assign rv_core$EN_getIResp =
	     rv_core$RDY_getIResp && i_cache_hitQ_rv$port1__read[65] ;
  assign rv_core$EN_getDReq = WILL_FIRE_RL_requestD ;
  assign rv_core$EN_getDResp =
	     rv_core$RDY_getDResp && d_cache_hitQ_rv$port1__read[32] ;
  assign rv_core$EN_getMMIOReq =
	     mmioreq$FULL_N && to_host$FULL_N && rv_core$RDY_getMMIOReq ;
  assign rv_core$EN_getMMIOResp = mmioreq$EMPTY_N && rv_core$RDY_getMMIOResp ;

  // submodule to_host
  assign to_host$D_IN =
	     (rv_core$getMMIOReq[63:32] == 32'hF000FFF4) ?
	       CASE_rv_coregetMMIOReq_BITS_31_TO_0_0_48_1_49_ETC__q2 :
	       rv_core$getMMIOReq[7:0] ;
  assign to_host$ENQ =
	     mmioreq$FULL_N && to_host$FULL_N && rv_core$RDY_getMMIOReq &&
	     (rv_core$getMMIOReq[63:32] == 32'hF000FFF4 ||
	      rv_core$getMMIOReq[63:32] == 32'hF000FFF0) ;
  assign to_host$DEQ = to_host$EMPTY_N && usb_core$uart_in_ready ;
  assign to_host$CLR = 1'b0 ;

  // submodule usb_core
  assign usb_core$reset = reset__h67520 ;
  assign usb_core$uart_in_data = to_host$D_OUT ;
  assign usb_core$uart_in_valid = to_host$EMPTY_N ;
  assign usb_core$uart_out_ready = from_host$FULL_N ;

  // remaining internal signals
  assign IF_SEL_ARR_d_cache_tagArray_0_27_d_cache_tagAr_ETC___d920 =
	     (SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	      SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916) ?
	       (d_cache_mshr_readBeforeLaterWrites_1$Q_OUT ?
		  3'd6 :
		  IF_d_cache_mshr_port_0_whas__69_THEN_d_cache_m_ETC___d472) :
	       IF_d_cache_mshr_readBeforeLaterWrites_1_read___ETC___d919 ;
  assign IF_SEL_ARR_d_cache_tagArray_0_27_d_cache_tagAr_ETC___d922 =
	     (SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	      SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916) ?
	       (d_cache_mshr_readBeforeLaterWrites_1$Q_OUT ?
		  3'd5 :
		  IF_d_cache_mshr_port_0_whas__69_THEN_d_cache_m_ETC___d472) :
	       IF_d_cache_mshr_readBeforeLaterWrites_1_read___ETC___d919 ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d502 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[31:0] :
	       d_cache_cache_data_memory$DO[31:0] ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d506 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[63:32] :
	       d_cache_cache_data_memory$DO[63:32] ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d510 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[95:64] :
	       d_cache_cache_data_memory$DO[95:64] ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d514 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[127:96] :
	       d_cache_cache_data_memory$DO[127:96] ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d518 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[159:128] :
	       d_cache_cache_data_memory$DO[159:128] ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d522 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[191:160] :
	       d_cache_cache_data_memory$DO[191:160] ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d526 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[223:192] :
	       d_cache_cache_data_memory$DO[223:192] ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d530 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[255:224] :
	       d_cache_cache_data_memory$DO[255:224] ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d534 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[287:256] :
	       d_cache_cache_data_memory$DO[287:256] ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d538 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[319:288] :
	       d_cache_cache_data_memory$DO[319:288] ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d542 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[351:320] :
	       d_cache_cache_data_memory$DO[351:320] ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d546 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[383:352] :
	       d_cache_cache_data_memory$DO[383:352] ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d550 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[415:384] :
	       d_cache_cache_data_memory$DO[415:384] ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d554 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[447:416] :
	       d_cache_cache_data_memory$DO[447:416] ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d558 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[479:448] :
	       d_cache_cache_data_memory$DO[479:448] ;
  assign IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d562 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT[511:480] :
	       d_cache_cache_data_memory$DO[511:480] ;
  assign IF_d_cache_mshr_port_0_whas__69_THEN_d_cache_m_ETC___d472 =
	     d_cache_mshr_port_0$whas ?
	       d_cache_mshr_port_0$wget :
	       d_cache_mshr_register ;
  assign IF_d_cache_mshr_readBeforeLaterWrites_1_read___ETC___d919 =
	     d_cache_mshr_readBeforeLaterWrites_1$Q_OUT ?
	       3'd1 :
	       IF_d_cache_mshr_port_0_whas__69_THEN_d_cache_m_ETC___d472 ;
  assign IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d801 =
	     { (d_cache_storeQ$D_OUT[37:34] == 4'd15) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d562,
	       (d_cache_storeQ$D_OUT[37:34] == 4'd14) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d558,
	       (d_cache_storeQ$D_OUT[37:34] == 4'd13) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d554,
	       (d_cache_storeQ$D_OUT[37:34] == 4'd12) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d550 } ;
  assign IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d806 =
	     { IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d801,
	       (d_cache_storeQ$D_OUT[37:34] == 4'd11) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d546,
	       (d_cache_storeQ$D_OUT[37:34] == 4'd10) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d542 } ;
  assign IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d811 =
	     { IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d806,
	       (d_cache_storeQ$D_OUT[37:34] == 4'd9) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d538,
	       (d_cache_storeQ$D_OUT[37:34] == 4'd8) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d534 } ;
  assign IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d816 =
	     { IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d811,
	       (d_cache_storeQ$D_OUT[37:34] == 4'd7) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d530,
	       (d_cache_storeQ$D_OUT[37:34] == 4'd6) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d526 } ;
  assign IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d821 =
	     { IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d816,
	       (d_cache_storeQ$D_OUT[37:34] == 4'd5) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d522,
	       (d_cache_storeQ$D_OUT[37:34] == 4'd4) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d518 } ;
  assign IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d826 =
	     { IF_d_cache_storeQ_first__88_BITS_37_TO_34_90_E_ETC___d821,
	       (d_cache_storeQ$D_OUT[37:34] == 4'd3) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d514,
	       (d_cache_storeQ$D_OUT[37:34] == 4'd2) ?
		 d_cache_storeQ$D_OUT[31:0] :
		 IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d510 } ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d208 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[31:0] :
	       i_cache_cache_data_memory$DO[31:0] ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d212 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[63:32] :
	       i_cache_cache_data_memory$DO[63:32] ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d216 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[95:64] :
	       i_cache_cache_data_memory$DO[95:64] ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d220 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[127:96] :
	       i_cache_cache_data_memory$DO[127:96] ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d224 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[159:128] :
	       i_cache_cache_data_memory$DO[159:128] ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d228 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[191:160] :
	       i_cache_cache_data_memory$DO[191:160] ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d232 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[223:192] :
	       i_cache_cache_data_memory$DO[223:192] ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d236 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[255:224] :
	       i_cache_cache_data_memory$DO[255:224] ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d240 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[287:256] :
	       i_cache_cache_data_memory$DO[287:256] ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d244 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[319:288] :
	       i_cache_cache_data_memory$DO[319:288] ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d248 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[351:320] :
	       i_cache_cache_data_memory$DO[351:320] ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d252 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[383:352] :
	       i_cache_cache_data_memory$DO[383:352] ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d256 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[415:384] :
	       i_cache_cache_data_memory$DO[415:384] ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d260 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[447:416] :
	       i_cache_cache_data_memory$DO[447:416] ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d264 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[479:448] :
	       i_cache_cache_data_memory$DO[479:448] ;
  assign IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d268 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT[511:480] :
	       i_cache_cache_data_memory$DO[511:480] ;
  assign IF_i_cache_mshr_port_0_whas__82_THEN_i_cache_m_ETC___d185 =
	     i_cache_mshr_port_0$whas ?
	       i_cache_mshr_port_0$wget :
	       i_cache_mshr_register ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 =
	     cur_tag__h61264 == rv_core$getDReq[63:42] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d935 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd0 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d938 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd1 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d941 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd2 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d944 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd3 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d947 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd4 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d950 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd5 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d953 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd6 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d956 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd7 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d959 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd8 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d962 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd9 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d965 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd10 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d968 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd11 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d971 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd12 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d974 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd13 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d977 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd14 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d980 =
	     SEL_ARR_d_cache_tagArray_0_27_d_cache_tagArray_ETC___d915 &&
	     rv_core$getDReq[41:38] == 4'd15 &&
	     SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 &&
	     rv_core$getDReq[64] ;
  assign SEL_ARR_i_cache_tagArray_0_39_i_cache_tagArray_ETC___d877 =
	     cur_tag__h58264 == rv_core$getIReq[96:75] ;
  assign d_cache_cache_data_serverAdapter_cnt_30_PLUS_I_ETC___d436 =
	     d_cache_cache_data_serverAdapter_cnt +
	     (d_cache_cache_data_serverAdapter_cnt_1$whas ? 3'd1 : 3'd0) +
	     (d_cache_cache_data_serverAdapter_outData_dequeueing$whas ?
		3'd7 :
		3'd0) ;
  assign d_cache_cache_data_serverAdapter_cnt_30_SLT_3___d611 =
	     (d_cache_cache_data_serverAdapter_cnt ^ 3'h4) < 3'd7 ;
  assign dram_bram_serverAdapter_cnt_7_PLUS_IF_dram_bra_ETC___d23 =
	     dram_bram_serverAdapter_cnt +
	     (dram_bram_serverAdapter_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dram_bram_serverAdapter_outData_dequeueing$whas ? 3'd7 : 3'd0) ;
  assign dram_bram_serverAdapter_cnt_7_SLT_3___d834 =
	     (dram_bram_serverAdapter_cnt ^ 3'h4) < 3'd7 ;
  assign i_cache_cache_data_serverAdapter_cnt_43_PLUS_I_ETC___d149 =
	     i_cache_cache_data_serverAdapter_cnt +
	     (i_cache_cache_data_serverAdapter_cnt_1$whas ? 3'd1 : 3'd0) +
	     (i_cache_cache_data_serverAdapter_outData_dequeueing$whas ?
		3'd7 :
		3'd0) ;
  assign i_cache_cache_data_serverAdapter_cnt_43_SLT_3___d323 =
	     (i_cache_cache_data_serverAdapter_cnt ^ 3'h4) < 3'd7 ;
  assign old_addr__h24108 = { old_tag__h24107, i_cache_missReq[74:71] } ;
  assign old_addr__h48279 = { old_tag__h48278, d_cache_missReq[41:38] } ;
  assign old_data__h24105 =
	     i_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       i_cache_cache_data_serverAdapter_outData_ff$D_OUT :
	       i_cache_cache_data_memory$DO ;
  assign old_data__h48276 =
	     d_cache_cache_data_serverAdapter_outData_ff$EMPTY_N ?
	       d_cache_cache_data_serverAdapter_outData_ff$D_OUT :
	       d_cache_cache_data_memory$DO ;
  assign reset__h67520 = ~rcnt[5] ;
  assign x__h20426 = i_cache_loadOffsetQ$D_OUT + 4'd1 ;
  assign x__h29522 = i_cache_missReq[70:67] + 4'd1 ;
  always@(i_cache_missReq or
	  i_cache_tagArray_0 or
	  i_cache_tagArray_1 or
	  i_cache_tagArray_2 or
	  i_cache_tagArray_3 or
	  i_cache_tagArray_4 or
	  i_cache_tagArray_5 or
	  i_cache_tagArray_6 or
	  i_cache_tagArray_7 or
	  i_cache_tagArray_8 or
	  i_cache_tagArray_9 or
	  i_cache_tagArray_10 or
	  i_cache_tagArray_11 or
	  i_cache_tagArray_12 or
	  i_cache_tagArray_13 or i_cache_tagArray_14 or i_cache_tagArray_15)
  begin
    case (i_cache_missReq[74:71])
      4'd0: old_tag__h24107 = i_cache_tagArray_0;
      4'd1: old_tag__h24107 = i_cache_tagArray_1;
      4'd2: old_tag__h24107 = i_cache_tagArray_2;
      4'd3: old_tag__h24107 = i_cache_tagArray_3;
      4'd4: old_tag__h24107 = i_cache_tagArray_4;
      4'd5: old_tag__h24107 = i_cache_tagArray_5;
      4'd6: old_tag__h24107 = i_cache_tagArray_6;
      4'd7: old_tag__h24107 = i_cache_tagArray_7;
      4'd8: old_tag__h24107 = i_cache_tagArray_8;
      4'd9: old_tag__h24107 = i_cache_tagArray_9;
      4'd10: old_tag__h24107 = i_cache_tagArray_10;
      4'd11: old_tag__h24107 = i_cache_tagArray_11;
      4'd12: old_tag__h24107 = i_cache_tagArray_12;
      4'd13: old_tag__h24107 = i_cache_tagArray_13;
      4'd14: old_tag__h24107 = i_cache_tagArray_14;
      4'd15: old_tag__h24107 = i_cache_tagArray_15;
    endcase
  end
  always@(i_cache_missReq or i_cache_memRespQ$D_OUT)
  begin
    case (i_cache_missReq[70:67])
      4'd0: first_word__h29423 = i_cache_memRespQ$D_OUT[31:0];
      4'd1: first_word__h29423 = i_cache_memRespQ$D_OUT[63:32];
      4'd2: first_word__h29423 = i_cache_memRespQ$D_OUT[95:64];
      4'd3: first_word__h29423 = i_cache_memRespQ$D_OUT[127:96];
      4'd4: first_word__h29423 = i_cache_memRespQ$D_OUT[159:128];
      4'd5: first_word__h29423 = i_cache_memRespQ$D_OUT[191:160];
      4'd6: first_word__h29423 = i_cache_memRespQ$D_OUT[223:192];
      4'd7: first_word__h29423 = i_cache_memRespQ$D_OUT[255:224];
      4'd8: first_word__h29423 = i_cache_memRespQ$D_OUT[287:256];
      4'd9: first_word__h29423 = i_cache_memRespQ$D_OUT[319:288];
      4'd10: first_word__h29423 = i_cache_memRespQ$D_OUT[351:320];
      4'd11: first_word__h29423 = i_cache_memRespQ$D_OUT[383:352];
      4'd12: first_word__h29423 = i_cache_memRespQ$D_OUT[415:384];
      4'd13: first_word__h29423 = i_cache_memRespQ$D_OUT[447:416];
      4'd14: first_word__h29423 = i_cache_memRespQ$D_OUT[479:448];
      4'd15: first_word__h29423 = i_cache_memRespQ$D_OUT[511:480];
    endcase
  end
  always@(d_cache_missReq or
	  d_cache_tagArray_0 or
	  d_cache_tagArray_1 or
	  d_cache_tagArray_2 or
	  d_cache_tagArray_3 or
	  d_cache_tagArray_4 or
	  d_cache_tagArray_5 or
	  d_cache_tagArray_6 or
	  d_cache_tagArray_7 or
	  d_cache_tagArray_8 or
	  d_cache_tagArray_9 or
	  d_cache_tagArray_10 or
	  d_cache_tagArray_11 or
	  d_cache_tagArray_12 or
	  d_cache_tagArray_13 or d_cache_tagArray_14 or d_cache_tagArray_15)
  begin
    case (d_cache_missReq[41:38])
      4'd0: old_tag__h48278 = d_cache_tagArray_0;
      4'd1: old_tag__h48278 = d_cache_tagArray_1;
      4'd2: old_tag__h48278 = d_cache_tagArray_2;
      4'd3: old_tag__h48278 = d_cache_tagArray_3;
      4'd4: old_tag__h48278 = d_cache_tagArray_4;
      4'd5: old_tag__h48278 = d_cache_tagArray_5;
      4'd6: old_tag__h48278 = d_cache_tagArray_6;
      4'd7: old_tag__h48278 = d_cache_tagArray_7;
      4'd8: old_tag__h48278 = d_cache_tagArray_8;
      4'd9: old_tag__h48278 = d_cache_tagArray_9;
      4'd10: old_tag__h48278 = d_cache_tagArray_10;
      4'd11: old_tag__h48278 = d_cache_tagArray_11;
      4'd12: old_tag__h48278 = d_cache_tagArray_12;
      4'd13: old_tag__h48278 = d_cache_tagArray_13;
      4'd14: old_tag__h48278 = d_cache_tagArray_14;
      4'd15: old_tag__h48278 = d_cache_tagArray_15;
    endcase
  end
  always@(rv_core$getIReq or
	  i_cache_tagArray_0 or
	  i_cache_tagArray_1 or
	  i_cache_tagArray_2 or
	  i_cache_tagArray_3 or
	  i_cache_tagArray_4 or
	  i_cache_tagArray_5 or
	  i_cache_tagArray_6 or
	  i_cache_tagArray_7 or
	  i_cache_tagArray_8 or
	  i_cache_tagArray_9 or
	  i_cache_tagArray_10 or
	  i_cache_tagArray_11 or
	  i_cache_tagArray_12 or
	  i_cache_tagArray_13 or i_cache_tagArray_14 or i_cache_tagArray_15)
  begin
    case (rv_core$getIReq[74:71])
      4'd0: cur_tag__h58264 = i_cache_tagArray_0;
      4'd1: cur_tag__h58264 = i_cache_tagArray_1;
      4'd2: cur_tag__h58264 = i_cache_tagArray_2;
      4'd3: cur_tag__h58264 = i_cache_tagArray_3;
      4'd4: cur_tag__h58264 = i_cache_tagArray_4;
      4'd5: cur_tag__h58264 = i_cache_tagArray_5;
      4'd6: cur_tag__h58264 = i_cache_tagArray_6;
      4'd7: cur_tag__h58264 = i_cache_tagArray_7;
      4'd8: cur_tag__h58264 = i_cache_tagArray_8;
      4'd9: cur_tag__h58264 = i_cache_tagArray_9;
      4'd10: cur_tag__h58264 = i_cache_tagArray_10;
      4'd11: cur_tag__h58264 = i_cache_tagArray_11;
      4'd12: cur_tag__h58264 = i_cache_tagArray_12;
      4'd13: cur_tag__h58264 = i_cache_tagArray_13;
      4'd14: cur_tag__h58264 = i_cache_tagArray_14;
      4'd15: cur_tag__h58264 = i_cache_tagArray_15;
    endcase
  end
  always@(rv_core$getDReq or
	  d_cache_tagArray_0 or
	  d_cache_tagArray_1 or
	  d_cache_tagArray_2 or
	  d_cache_tagArray_3 or
	  d_cache_tagArray_4 or
	  d_cache_tagArray_5 or
	  d_cache_tagArray_6 or
	  d_cache_tagArray_7 or
	  d_cache_tagArray_8 or
	  d_cache_tagArray_9 or
	  d_cache_tagArray_10 or
	  d_cache_tagArray_11 or
	  d_cache_tagArray_12 or
	  d_cache_tagArray_13 or d_cache_tagArray_14 or d_cache_tagArray_15)
  begin
    case (rv_core$getDReq[41:38])
      4'd0: cur_tag__h61264 = d_cache_tagArray_0;
      4'd1: cur_tag__h61264 = d_cache_tagArray_1;
      4'd2: cur_tag__h61264 = d_cache_tagArray_2;
      4'd3: cur_tag__h61264 = d_cache_tagArray_3;
      4'd4: cur_tag__h61264 = d_cache_tagArray_4;
      4'd5: cur_tag__h61264 = d_cache_tagArray_5;
      4'd6: cur_tag__h61264 = d_cache_tagArray_6;
      4'd7: cur_tag__h61264 = d_cache_tagArray_7;
      4'd8: cur_tag__h61264 = d_cache_tagArray_8;
      4'd9: cur_tag__h61264 = d_cache_tagArray_9;
      4'd10: cur_tag__h61264 = d_cache_tagArray_10;
      4'd11: cur_tag__h61264 = d_cache_tagArray_11;
      4'd12: cur_tag__h61264 = d_cache_tagArray_12;
      4'd13: cur_tag__h61264 = d_cache_tagArray_13;
      4'd14: cur_tag__h61264 = d_cache_tagArray_14;
      4'd15: cur_tag__h61264 = d_cache_tagArray_15;
    endcase
  end
  always@(x__h29522 or i_cache_memRespQ$D_OUT)
  begin
    case (x__h29522)
      4'd0: second_word___1__h29518 = i_cache_memRespQ$D_OUT[31:0];
      4'd1: second_word___1__h29518 = i_cache_memRespQ$D_OUT[63:32];
      4'd2: second_word___1__h29518 = i_cache_memRespQ$D_OUT[95:64];
      4'd3: second_word___1__h29518 = i_cache_memRespQ$D_OUT[127:96];
      4'd4: second_word___1__h29518 = i_cache_memRespQ$D_OUT[159:128];
      4'd5: second_word___1__h29518 = i_cache_memRespQ$D_OUT[191:160];
      4'd6: second_word___1__h29518 = i_cache_memRespQ$D_OUT[223:192];
      4'd7: second_word___1__h29518 = i_cache_memRespQ$D_OUT[255:224];
      4'd8: second_word___1__h29518 = i_cache_memRespQ$D_OUT[287:256];
      4'd9: second_word___1__h29518 = i_cache_memRespQ$D_OUT[319:288];
      4'd10: second_word___1__h29518 = i_cache_memRespQ$D_OUT[351:320];
      4'd11: second_word___1__h29518 = i_cache_memRespQ$D_OUT[383:352];
      4'd12: second_word___1__h29518 = i_cache_memRespQ$D_OUT[415:384];
      4'd13: second_word___1__h29518 = i_cache_memRespQ$D_OUT[447:416];
      4'd14: second_word___1__h29518 = i_cache_memRespQ$D_OUT[479:448];
      4'd15: second_word___1__h29518 = i_cache_memRespQ$D_OUT[511:480];
    endcase
  end
  always@(i_cache_loadOffsetQ$D_OUT or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d208 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d212 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d216 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d220 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d224 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d228 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d232 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d236 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d240 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d244 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d248 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d252 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d256 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d260 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d264 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d268)
  begin
    case (i_cache_loadOffsetQ$D_OUT)
      4'd0:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d208;
      4'd1:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d212;
      4'd2:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d216;
      4'd3:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d220;
      4'd4:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d224;
      4'd5:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d228;
      4'd6:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d232;
      4'd7:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d236;
      4'd8:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d240;
      4'd9:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d244;
      4'd10:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d248;
      4'd11:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d252;
      4'd12:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d256;
      4'd13:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d260;
      4'd14:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d264;
      4'd15:
	  first_word__h17861 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d268;
    endcase
  end
  always@(x__h20426 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d208 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d212 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d216 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d220 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d224 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d228 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d232 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d236 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d240 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d244 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d248 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d252 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d256 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d260 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d264 or
	  IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d268)
  begin
    case (x__h20426)
      4'd0:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d208;
      4'd1:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d212;
      4'd2:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d216;
      4'd3:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d220;
      4'd4:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d224;
      4'd5:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d228;
      4'd6:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d232;
      4'd7:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d236;
      4'd8:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d240;
      4'd9:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d244;
      4'd10:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d248;
      4'd11:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d252;
      4'd12:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d256;
      4'd13:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d260;
      4'd14:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d264;
      4'd15:
	  second_word___1__h20422 =
	      IF_i_cache_cache_data_serverAdapter_outData_ff_ETC___d268;
    endcase
  end
  always@(i_cache_missReq or
	  i_cache_dirtyArray_0 or
	  i_cache_dirtyArray_1 or
	  i_cache_dirtyArray_2 or
	  i_cache_dirtyArray_3 or
	  i_cache_dirtyArray_4 or
	  i_cache_dirtyArray_5 or
	  i_cache_dirtyArray_6 or
	  i_cache_dirtyArray_7 or
	  i_cache_dirtyArray_8 or
	  i_cache_dirtyArray_9 or
	  i_cache_dirtyArray_10 or
	  i_cache_dirtyArray_11 or
	  i_cache_dirtyArray_12 or
	  i_cache_dirtyArray_13 or
	  i_cache_dirtyArray_14 or i_cache_dirtyArray_15)
  begin
    case (i_cache_missReq[74:71])
      4'd0:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_0;
      4'd1:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_1;
      4'd2:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_2;
      4'd3:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_3;
      4'd4:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_4;
      4'd5:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_5;
      4'd6:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_6;
      4'd7:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_7;
      4'd8:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_8;
      4'd9:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_9;
      4'd10:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_10;
      4'd11:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_11;
      4'd12:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_12;
      4'd13:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_13;
      4'd14:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_14;
      4'd15:
	  SEL_ARR_i_cache_dirtyArray_0_81_i_cache_dirtyA_ETC___d300 =
	      i_cache_dirtyArray_15;
    endcase
  end
  always@(i_cache_missReq or
	  i_cache_validArray_0 or
	  i_cache_validArray_1 or
	  i_cache_validArray_2 or
	  i_cache_validArray_3 or
	  i_cache_validArray_4 or
	  i_cache_validArray_5 or
	  i_cache_validArray_6 or
	  i_cache_validArray_7 or
	  i_cache_validArray_8 or
	  i_cache_validArray_9 or
	  i_cache_validArray_10 or
	  i_cache_validArray_11 or
	  i_cache_validArray_12 or
	  i_cache_validArray_13 or
	  i_cache_validArray_14 or i_cache_validArray_15)
  begin
    case (i_cache_missReq[74:71])
      4'd0:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_0;
      4'd1:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_1;
      4'd2:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_2;
      4'd3:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_3;
      4'd4:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_4;
      4'd5:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_5;
      4'd6:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_6;
      4'd7:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_7;
      4'd8:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_8;
      4'd9:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_9;
      4'd10:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_10;
      4'd11:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_11;
      4'd12:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_12;
      4'd13:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_13;
      4'd14:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_14;
      4'd15:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d320 =
	      i_cache_validArray_15;
    endcase
  end
  always@(d_cache_missReq or
	  d_cache_dirtyArray_0 or
	  d_cache_dirtyArray_1 or
	  d_cache_dirtyArray_2 or
	  d_cache_dirtyArray_3 or
	  d_cache_dirtyArray_4 or
	  d_cache_dirtyArray_5 or
	  d_cache_dirtyArray_6 or
	  d_cache_dirtyArray_7 or
	  d_cache_dirtyArray_8 or
	  d_cache_dirtyArray_9 or
	  d_cache_dirtyArray_10 or
	  d_cache_dirtyArray_11 or
	  d_cache_dirtyArray_12 or
	  d_cache_dirtyArray_13 or
	  d_cache_dirtyArray_14 or d_cache_dirtyArray_15)
  begin
    case (d_cache_missReq[41:38])
      4'd0:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_0;
      4'd1:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_1;
      4'd2:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_2;
      4'd3:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_3;
      4'd4:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_4;
      4'd5:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_5;
      4'd6:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_6;
      4'd7:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_7;
      4'd8:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_8;
      4'd9:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_9;
      4'd10:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_10;
      4'd11:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_11;
      4'd12:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_12;
      4'd13:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_13;
      4'd14:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_14;
      4'd15:
	  SEL_ARR_d_cache_dirtyArray_0_69_d_cache_dirtyA_ETC___d588 =
	      d_cache_dirtyArray_15;
    endcase
  end
  always@(d_cache_missReq or
	  d_cache_validArray_0 or
	  d_cache_validArray_1 or
	  d_cache_validArray_2 or
	  d_cache_validArray_3 or
	  d_cache_validArray_4 or
	  d_cache_validArray_5 or
	  d_cache_validArray_6 or
	  d_cache_validArray_7 or
	  d_cache_validArray_8 or
	  d_cache_validArray_9 or
	  d_cache_validArray_10 or
	  d_cache_validArray_11 or
	  d_cache_validArray_12 or
	  d_cache_validArray_13 or
	  d_cache_validArray_14 or d_cache_validArray_15)
  begin
    case (d_cache_missReq[41:38])
      4'd0:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_0;
      4'd1:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_1;
      4'd2:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_2;
      4'd3:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_3;
      4'd4:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_4;
      4'd5:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_5;
      4'd6:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_6;
      4'd7:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_7;
      4'd8:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_8;
      4'd9:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_9;
      4'd10:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_10;
      4'd11:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_11;
      4'd12:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_12;
      4'd13:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_13;
      4'd14:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_14;
      4'd15:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d608 =
	      d_cache_validArray_15;
    endcase
  end
  always@(d_cache_loadOffsetQ$D_OUT or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d502 or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d506 or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d510 or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d514 or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d518 or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d522 or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d526 or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d530 or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d534 or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d538 or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d542 or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d546 or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d550 or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d554 or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d558 or
	  IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d562)
  begin
    case (d_cache_loadOffsetQ$D_OUT)
      4'd0:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d502;
      4'd1:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d506;
      4'd2:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d510;
      4'd3:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d514;
      4'd4:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d518;
      4'd5:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d522;
      4'd6:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d526;
      4'd7:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d530;
      4'd8:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d534;
      4'd9:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d538;
      4'd10:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d542;
      4'd11:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d546;
      4'd12:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d550;
      4'd13:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d554;
      4'd14:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d558;
      4'd15:
	  SEL_ARR_IF_d_cache_cache_data_serverAdapter_ou_ETC___d565 =
	      IF_d_cache_cache_data_serverAdapter_outData_ff_ETC___d562;
    endcase
  end
  always@(rv_core$getIReq or
	  i_cache_validArray_0 or
	  i_cache_validArray_1 or
	  i_cache_validArray_2 or
	  i_cache_validArray_3 or
	  i_cache_validArray_4 or
	  i_cache_validArray_5 or
	  i_cache_validArray_6 or
	  i_cache_validArray_7 or
	  i_cache_validArray_8 or
	  i_cache_validArray_9 or
	  i_cache_validArray_10 or
	  i_cache_validArray_11 or
	  i_cache_validArray_12 or
	  i_cache_validArray_13 or
	  i_cache_validArray_14 or i_cache_validArray_15)
  begin
    case (rv_core$getIReq[74:71])
      4'd0:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_0;
      4'd1:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_1;
      4'd2:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_2;
      4'd3:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_3;
      4'd4:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_4;
      4'd5:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_5;
      4'd6:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_6;
      4'd7:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_7;
      4'd8:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_8;
      4'd9:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_9;
      4'd10:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_10;
      4'd11:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_11;
      4'd12:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_12;
      4'd13:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_13;
      4'd14:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_14;
      4'd15:
	  SEL_ARR_i_cache_validArray_0_03_i_cache_validA_ETC___d878 =
	      i_cache_validArray_15;
    endcase
  end
  always@(rv_core$getDReq or
	  d_cache_validArray_0 or
	  d_cache_validArray_1 or
	  d_cache_validArray_2 or
	  d_cache_validArray_3 or
	  d_cache_validArray_4 or
	  d_cache_validArray_5 or
	  d_cache_validArray_6 or
	  d_cache_validArray_7 or
	  d_cache_validArray_8 or
	  d_cache_validArray_9 or
	  d_cache_validArray_10 or
	  d_cache_validArray_11 or
	  d_cache_validArray_12 or
	  d_cache_validArray_13 or
	  d_cache_validArray_14 or d_cache_validArray_15)
  begin
    case (rv_core$getDReq[41:38])
      4'd0:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_0;
      4'd1:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_1;
      4'd2:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_2;
      4'd3:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_3;
      4'd4:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_4;
      4'd5:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_5;
      4'd6:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_6;
      4'd7:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_7;
      4'd8:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_8;
      4'd9:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_9;
      4'd10:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_10;
      4'd11:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_11;
      4'd12:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_12;
      4'd13:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_13;
      4'd14:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_14;
      4'd15:
	  SEL_ARR_d_cache_validArray_0_91_d_cache_validA_ETC___d916 =
	      d_cache_validArray_15;
    endcase
  end
  always@(d_cache_missReq or d_cache_memRespQ$D_OUT)
  begin
    case (d_cache_missReq[37:34])
      4'd0:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[31:0];
      4'd1:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[63:32];
      4'd2:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[95:64];
      4'd3:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[127:96];
      4'd4:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[159:128];
      4'd5:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[191:160];
      4'd6:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[223:192];
      4'd7:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[255:224];
      4'd8:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[287:256];
      4'd9:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[319:288];
      4'd10:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[351:320];
      4'd11:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[383:352];
      4'd12:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[415:384];
      4'd13:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[447:416];
      4'd14:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[479:448];
      4'd15:
	  CASE_d_cache_missReq_BITS_37_TO_34_0_d_cache_m_ETC__q1 =
	      d_cache_memRespQ$D_OUT[511:480];
    endcase
  end
  always@(rv_core$getMMIOReq)
  begin
    case (rv_core$getMMIOReq[31:0])
      32'd0: CASE_rv_coregetMMIOReq_BITS_31_TO_0_0_48_1_49_ETC__q2 = 8'd48;
      32'd1: CASE_rv_coregetMMIOReq_BITS_31_TO_0_0_48_1_49_ETC__q2 = 8'd49;
      32'd2: CASE_rv_coregetMMIOReq_BITS_31_TO_0_0_48_1_49_ETC__q2 = 8'd50;
      32'd3: CASE_rv_coregetMMIOReq_BITS_31_TO_0_0_48_1_49_ETC__q2 = 8'd51;
      32'd4: CASE_rv_coregetMMIOReq_BITS_31_TO_0_0_48_1_49_ETC__q2 = 8'd52;
      32'd5: CASE_rv_coregetMMIOReq_BITS_31_TO_0_0_48_1_49_ETC__q2 = 8'd53;
      32'd6: CASE_rv_coregetMMIOReq_BITS_31_TO_0_0_48_1_49_ETC__q2 = 8'd54;
      32'd7: CASE_rv_coregetMMIOReq_BITS_31_TO_0_0_48_1_49_ETC__q2 = 8'd55;
      32'd8: CASE_rv_coregetMMIOReq_BITS_31_TO_0_0_48_1_49_ETC__q2 = 8'd56;
      32'd9: CASE_rv_coregetMMIOReq_BITS_31_TO_0_0_48_1_49_ETC__q2 = 8'd57;
      default: CASE_rv_coregetMMIOReq_BITS_31_TO_0_0_48_1_49_ETC__q2 = 8'd48;
    endcase
  end

  // handling of inlined registers

  always@(posedge pin_clk)
  begin
    if (usr_btn == `BSV_RESET_VALUE)
      begin
        b <= `BSV_ASSIGNMENT_DELAY 8'd0;
	cnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
	cycle_count <= `BSV_ASSIGNMENT_DELAY 24'd0;
	d_cache_cache_data_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	d_cache_cache_data_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	d_cache_dirtyArray_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_dirtyArray_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_dirtyArray_10 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_dirtyArray_11 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_dirtyArray_12 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_dirtyArray_13 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_dirtyArray_14 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_dirtyArray_15 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_dirtyArray_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_dirtyArray_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_dirtyArray_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_dirtyArray_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_dirtyArray_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_dirtyArray_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_dirtyArray_8 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_dirtyArray_9 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_hitCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	d_cache_hitQ_rv <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	d_cache_lockL1_register <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_missCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	d_cache_mshr_register <= `BSV_ASSIGNMENT_DELAY 3'd0;
	d_cache_tagArray_0 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_tagArray_1 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_tagArray_10 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_tagArray_11 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_tagArray_12 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_tagArray_13 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_tagArray_14 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_tagArray_15 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_tagArray_2 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_tagArray_3 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_tagArray_4 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_tagArray_5 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_tagArray_6 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_tagArray_7 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_tagArray_8 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_tagArray_9 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	d_cache_validArray_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_validArray_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_validArray_10 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_validArray_11 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_validArray_12 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_validArray_13 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_validArray_14 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_validArray_15 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_validArray_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_validArray_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_validArray_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_validArray_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_validArray_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_validArray_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_validArray_8 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	d_cache_validArray_9 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dram_bram_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dram_bram_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dram_dl1_d_0_rv <= `BSV_ASSIGNMENT_DELAY
	    513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dram_dl1_d_1_rv <= `BSV_ASSIGNMENT_DELAY
	    513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dram_dl1_d_2_rv <= `BSV_ASSIGNMENT_DELAY
	    513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dram_dl1_d_3_rv <= `BSV_ASSIGNMENT_DELAY
	    513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dram_dl2_d_0_rv <= `BSV_ASSIGNMENT_DELAY
	    513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dram_dl2_d_1_rv <= `BSV_ASSIGNMENT_DELAY
	    513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dram_dl2_d_2_rv <= `BSV_ASSIGNMENT_DELAY
	    513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dram_dl2_d_3_rv <= `BSV_ASSIGNMENT_DELAY
	    513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	g <= `BSV_ASSIGNMENT_DELAY 8'd0;
	i_cache_cache_data_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	i_cache_cache_data_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	i_cache_dirtyArray_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_dirtyArray_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_dirtyArray_10 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_dirtyArray_11 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_dirtyArray_12 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_dirtyArray_13 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_dirtyArray_14 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_dirtyArray_15 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_dirtyArray_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_dirtyArray_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_dirtyArray_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_dirtyArray_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_dirtyArray_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_dirtyArray_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_dirtyArray_8 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_dirtyArray_9 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_hitCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i_cache_hitQ_rv <= `BSV_ASSIGNMENT_DELAY 66'h0AAAAAAAAAAAAAAAA;
	i_cache_missCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	i_cache_mshr_register <= `BSV_ASSIGNMENT_DELAY 3'd0;
	i_cache_tagArray_0 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_tagArray_1 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_tagArray_10 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_tagArray_11 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_tagArray_12 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_tagArray_13 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_tagArray_14 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_tagArray_15 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_tagArray_2 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_tagArray_3 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_tagArray_4 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_tagArray_5 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_tagArray_6 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_tagArray_7 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_tagArray_8 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_tagArray_9 <= `BSV_ASSIGNMENT_DELAY 22'd0;
	i_cache_validArray_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_validArray_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_validArray_10 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_validArray_11 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_validArray_12 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_validArray_13 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_validArray_14 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_validArray_15 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_validArray_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_validArray_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_validArray_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_validArray_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_validArray_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_validArray_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_validArray_8 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	i_cache_validArray_9 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	r <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rcnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (b$EN) b <= `BSV_ASSIGNMENT_DELAY b$D_IN;
	if (cnt$EN) cnt <= `BSV_ASSIGNMENT_DELAY cnt$D_IN;
	if (cycle_count$EN)
	  cycle_count <= `BSV_ASSIGNMENT_DELAY cycle_count$D_IN;
	if (d_cache_cache_data_serverAdapter_cnt$EN)
	  d_cache_cache_data_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY
	      d_cache_cache_data_serverAdapter_cnt$D_IN;
	if (d_cache_cache_data_serverAdapter_s1$EN)
	  d_cache_cache_data_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_cache_data_serverAdapter_s1$D_IN;
	if (d_cache_dirtyArray_0$EN)
	  d_cache_dirtyArray_0 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_0$D_IN;
	if (d_cache_dirtyArray_1$EN)
	  d_cache_dirtyArray_1 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_1$D_IN;
	if (d_cache_dirtyArray_10$EN)
	  d_cache_dirtyArray_10 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_10$D_IN;
	if (d_cache_dirtyArray_11$EN)
	  d_cache_dirtyArray_11 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_11$D_IN;
	if (d_cache_dirtyArray_12$EN)
	  d_cache_dirtyArray_12 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_12$D_IN;
	if (d_cache_dirtyArray_13$EN)
	  d_cache_dirtyArray_13 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_13$D_IN;
	if (d_cache_dirtyArray_14$EN)
	  d_cache_dirtyArray_14 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_14$D_IN;
	if (d_cache_dirtyArray_15$EN)
	  d_cache_dirtyArray_15 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_15$D_IN;
	if (d_cache_dirtyArray_2$EN)
	  d_cache_dirtyArray_2 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_2$D_IN;
	if (d_cache_dirtyArray_3$EN)
	  d_cache_dirtyArray_3 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_3$D_IN;
	if (d_cache_dirtyArray_4$EN)
	  d_cache_dirtyArray_4 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_4$D_IN;
	if (d_cache_dirtyArray_5$EN)
	  d_cache_dirtyArray_5 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_5$D_IN;
	if (d_cache_dirtyArray_6$EN)
	  d_cache_dirtyArray_6 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_6$D_IN;
	if (d_cache_dirtyArray_7$EN)
	  d_cache_dirtyArray_7 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_7$D_IN;
	if (d_cache_dirtyArray_8$EN)
	  d_cache_dirtyArray_8 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_8$D_IN;
	if (d_cache_dirtyArray_9$EN)
	  d_cache_dirtyArray_9 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_dirtyArray_9$D_IN;
	if (d_cache_hitCount$EN)
	  d_cache_hitCount <= `BSV_ASSIGNMENT_DELAY d_cache_hitCount$D_IN;
	if (d_cache_hitQ_rv$EN)
	  d_cache_hitQ_rv <= `BSV_ASSIGNMENT_DELAY d_cache_hitQ_rv$D_IN;
	if (d_cache_lockL1_register$EN)
	  d_cache_lockL1_register <= `BSV_ASSIGNMENT_DELAY
	      d_cache_lockL1_register$D_IN;
	if (d_cache_missCount$EN)
	  d_cache_missCount <= `BSV_ASSIGNMENT_DELAY d_cache_missCount$D_IN;
	if (d_cache_mshr_register$EN)
	  d_cache_mshr_register <= `BSV_ASSIGNMENT_DELAY
	      d_cache_mshr_register$D_IN;
	if (d_cache_tagArray_0$EN)
	  d_cache_tagArray_0 <= `BSV_ASSIGNMENT_DELAY d_cache_tagArray_0$D_IN;
	if (d_cache_tagArray_1$EN)
	  d_cache_tagArray_1 <= `BSV_ASSIGNMENT_DELAY d_cache_tagArray_1$D_IN;
	if (d_cache_tagArray_10$EN)
	  d_cache_tagArray_10 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_tagArray_10$D_IN;
	if (d_cache_tagArray_11$EN)
	  d_cache_tagArray_11 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_tagArray_11$D_IN;
	if (d_cache_tagArray_12$EN)
	  d_cache_tagArray_12 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_tagArray_12$D_IN;
	if (d_cache_tagArray_13$EN)
	  d_cache_tagArray_13 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_tagArray_13$D_IN;
	if (d_cache_tagArray_14$EN)
	  d_cache_tagArray_14 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_tagArray_14$D_IN;
	if (d_cache_tagArray_15$EN)
	  d_cache_tagArray_15 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_tagArray_15$D_IN;
	if (d_cache_tagArray_2$EN)
	  d_cache_tagArray_2 <= `BSV_ASSIGNMENT_DELAY d_cache_tagArray_2$D_IN;
	if (d_cache_tagArray_3$EN)
	  d_cache_tagArray_3 <= `BSV_ASSIGNMENT_DELAY d_cache_tagArray_3$D_IN;
	if (d_cache_tagArray_4$EN)
	  d_cache_tagArray_4 <= `BSV_ASSIGNMENT_DELAY d_cache_tagArray_4$D_IN;
	if (d_cache_tagArray_5$EN)
	  d_cache_tagArray_5 <= `BSV_ASSIGNMENT_DELAY d_cache_tagArray_5$D_IN;
	if (d_cache_tagArray_6$EN)
	  d_cache_tagArray_6 <= `BSV_ASSIGNMENT_DELAY d_cache_tagArray_6$D_IN;
	if (d_cache_tagArray_7$EN)
	  d_cache_tagArray_7 <= `BSV_ASSIGNMENT_DELAY d_cache_tagArray_7$D_IN;
	if (d_cache_tagArray_8$EN)
	  d_cache_tagArray_8 <= `BSV_ASSIGNMENT_DELAY d_cache_tagArray_8$D_IN;
	if (d_cache_tagArray_9$EN)
	  d_cache_tagArray_9 <= `BSV_ASSIGNMENT_DELAY d_cache_tagArray_9$D_IN;
	if (d_cache_validArray_0$EN)
	  d_cache_validArray_0 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_0$D_IN;
	if (d_cache_validArray_1$EN)
	  d_cache_validArray_1 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_1$D_IN;
	if (d_cache_validArray_10$EN)
	  d_cache_validArray_10 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_10$D_IN;
	if (d_cache_validArray_11$EN)
	  d_cache_validArray_11 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_11$D_IN;
	if (d_cache_validArray_12$EN)
	  d_cache_validArray_12 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_12$D_IN;
	if (d_cache_validArray_13$EN)
	  d_cache_validArray_13 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_13$D_IN;
	if (d_cache_validArray_14$EN)
	  d_cache_validArray_14 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_14$D_IN;
	if (d_cache_validArray_15$EN)
	  d_cache_validArray_15 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_15$D_IN;
	if (d_cache_validArray_2$EN)
	  d_cache_validArray_2 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_2$D_IN;
	if (d_cache_validArray_3$EN)
	  d_cache_validArray_3 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_3$D_IN;
	if (d_cache_validArray_4$EN)
	  d_cache_validArray_4 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_4$D_IN;
	if (d_cache_validArray_5$EN)
	  d_cache_validArray_5 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_5$D_IN;
	if (d_cache_validArray_6$EN)
	  d_cache_validArray_6 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_6$D_IN;
	if (d_cache_validArray_7$EN)
	  d_cache_validArray_7 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_7$D_IN;
	if (d_cache_validArray_8$EN)
	  d_cache_validArray_8 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_8$D_IN;
	if (d_cache_validArray_9$EN)
	  d_cache_validArray_9 <= `BSV_ASSIGNMENT_DELAY
	      d_cache_validArray_9$D_IN;
	if (dram_bram_serverAdapter_cnt$EN)
	  dram_bram_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY
	      dram_bram_serverAdapter_cnt$D_IN;
	if (dram_bram_serverAdapter_s1$EN)
	  dram_bram_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY
	      dram_bram_serverAdapter_s1$D_IN;
	if (dram_dl1_d_0_rv$EN)
	  dram_dl1_d_0_rv <= `BSV_ASSIGNMENT_DELAY dram_dl1_d_0_rv$D_IN;
	if (dram_dl1_d_1_rv$EN)
	  dram_dl1_d_1_rv <= `BSV_ASSIGNMENT_DELAY dram_dl1_d_1_rv$D_IN;
	if (dram_dl1_d_2_rv$EN)
	  dram_dl1_d_2_rv <= `BSV_ASSIGNMENT_DELAY dram_dl1_d_2_rv$D_IN;
	if (dram_dl1_d_3_rv$EN)
	  dram_dl1_d_3_rv <= `BSV_ASSIGNMENT_DELAY dram_dl1_d_3_rv$D_IN;
	if (dram_dl2_d_0_rv$EN)
	  dram_dl2_d_0_rv <= `BSV_ASSIGNMENT_DELAY dram_dl2_d_0_rv$D_IN;
	if (dram_dl2_d_1_rv$EN)
	  dram_dl2_d_1_rv <= `BSV_ASSIGNMENT_DELAY dram_dl2_d_1_rv$D_IN;
	if (dram_dl2_d_2_rv$EN)
	  dram_dl2_d_2_rv <= `BSV_ASSIGNMENT_DELAY dram_dl2_d_2_rv$D_IN;
	if (dram_dl2_d_3_rv$EN)
	  dram_dl2_d_3_rv <= `BSV_ASSIGNMENT_DELAY dram_dl2_d_3_rv$D_IN;
	if (g$EN) g <= `BSV_ASSIGNMENT_DELAY g$D_IN;
	if (i_cache_cache_data_serverAdapter_cnt$EN)
	  i_cache_cache_data_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY
	      i_cache_cache_data_serverAdapter_cnt$D_IN;
	if (i_cache_cache_data_serverAdapter_s1$EN)
	  i_cache_cache_data_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_cache_data_serverAdapter_s1$D_IN;
	if (i_cache_dirtyArray_0$EN)
	  i_cache_dirtyArray_0 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_0$D_IN;
	if (i_cache_dirtyArray_1$EN)
	  i_cache_dirtyArray_1 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_1$D_IN;
	if (i_cache_dirtyArray_10$EN)
	  i_cache_dirtyArray_10 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_10$D_IN;
	if (i_cache_dirtyArray_11$EN)
	  i_cache_dirtyArray_11 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_11$D_IN;
	if (i_cache_dirtyArray_12$EN)
	  i_cache_dirtyArray_12 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_12$D_IN;
	if (i_cache_dirtyArray_13$EN)
	  i_cache_dirtyArray_13 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_13$D_IN;
	if (i_cache_dirtyArray_14$EN)
	  i_cache_dirtyArray_14 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_14$D_IN;
	if (i_cache_dirtyArray_15$EN)
	  i_cache_dirtyArray_15 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_15$D_IN;
	if (i_cache_dirtyArray_2$EN)
	  i_cache_dirtyArray_2 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_2$D_IN;
	if (i_cache_dirtyArray_3$EN)
	  i_cache_dirtyArray_3 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_3$D_IN;
	if (i_cache_dirtyArray_4$EN)
	  i_cache_dirtyArray_4 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_4$D_IN;
	if (i_cache_dirtyArray_5$EN)
	  i_cache_dirtyArray_5 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_5$D_IN;
	if (i_cache_dirtyArray_6$EN)
	  i_cache_dirtyArray_6 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_6$D_IN;
	if (i_cache_dirtyArray_7$EN)
	  i_cache_dirtyArray_7 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_7$D_IN;
	if (i_cache_dirtyArray_8$EN)
	  i_cache_dirtyArray_8 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_8$D_IN;
	if (i_cache_dirtyArray_9$EN)
	  i_cache_dirtyArray_9 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_dirtyArray_9$D_IN;
	if (i_cache_hitCount$EN)
	  i_cache_hitCount <= `BSV_ASSIGNMENT_DELAY i_cache_hitCount$D_IN;
	if (i_cache_hitQ_rv$EN)
	  i_cache_hitQ_rv <= `BSV_ASSIGNMENT_DELAY i_cache_hitQ_rv$D_IN;
	if (i_cache_missCount$EN)
	  i_cache_missCount <= `BSV_ASSIGNMENT_DELAY i_cache_missCount$D_IN;
	if (i_cache_mshr_register$EN)
	  i_cache_mshr_register <= `BSV_ASSIGNMENT_DELAY
	      i_cache_mshr_register$D_IN;
	if (i_cache_tagArray_0$EN)
	  i_cache_tagArray_0 <= `BSV_ASSIGNMENT_DELAY i_cache_tagArray_0$D_IN;
	if (i_cache_tagArray_1$EN)
	  i_cache_tagArray_1 <= `BSV_ASSIGNMENT_DELAY i_cache_tagArray_1$D_IN;
	if (i_cache_tagArray_10$EN)
	  i_cache_tagArray_10 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_tagArray_10$D_IN;
	if (i_cache_tagArray_11$EN)
	  i_cache_tagArray_11 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_tagArray_11$D_IN;
	if (i_cache_tagArray_12$EN)
	  i_cache_tagArray_12 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_tagArray_12$D_IN;
	if (i_cache_tagArray_13$EN)
	  i_cache_tagArray_13 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_tagArray_13$D_IN;
	if (i_cache_tagArray_14$EN)
	  i_cache_tagArray_14 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_tagArray_14$D_IN;
	if (i_cache_tagArray_15$EN)
	  i_cache_tagArray_15 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_tagArray_15$D_IN;
	if (i_cache_tagArray_2$EN)
	  i_cache_tagArray_2 <= `BSV_ASSIGNMENT_DELAY i_cache_tagArray_2$D_IN;
	if (i_cache_tagArray_3$EN)
	  i_cache_tagArray_3 <= `BSV_ASSIGNMENT_DELAY i_cache_tagArray_3$D_IN;
	if (i_cache_tagArray_4$EN)
	  i_cache_tagArray_4 <= `BSV_ASSIGNMENT_DELAY i_cache_tagArray_4$D_IN;
	if (i_cache_tagArray_5$EN)
	  i_cache_tagArray_5 <= `BSV_ASSIGNMENT_DELAY i_cache_tagArray_5$D_IN;
	if (i_cache_tagArray_6$EN)
	  i_cache_tagArray_6 <= `BSV_ASSIGNMENT_DELAY i_cache_tagArray_6$D_IN;
	if (i_cache_tagArray_7$EN)
	  i_cache_tagArray_7 <= `BSV_ASSIGNMENT_DELAY i_cache_tagArray_7$D_IN;
	if (i_cache_tagArray_8$EN)
	  i_cache_tagArray_8 <= `BSV_ASSIGNMENT_DELAY i_cache_tagArray_8$D_IN;
	if (i_cache_tagArray_9$EN)
	  i_cache_tagArray_9 <= `BSV_ASSIGNMENT_DELAY i_cache_tagArray_9$D_IN;
	if (i_cache_validArray_0$EN)
	  i_cache_validArray_0 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_0$D_IN;
	if (i_cache_validArray_1$EN)
	  i_cache_validArray_1 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_1$D_IN;
	if (i_cache_validArray_10$EN)
	  i_cache_validArray_10 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_10$D_IN;
	if (i_cache_validArray_11$EN)
	  i_cache_validArray_11 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_11$D_IN;
	if (i_cache_validArray_12$EN)
	  i_cache_validArray_12 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_12$D_IN;
	if (i_cache_validArray_13$EN)
	  i_cache_validArray_13 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_13$D_IN;
	if (i_cache_validArray_14$EN)
	  i_cache_validArray_14 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_14$D_IN;
	if (i_cache_validArray_15$EN)
	  i_cache_validArray_15 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_15$D_IN;
	if (i_cache_validArray_2$EN)
	  i_cache_validArray_2 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_2$D_IN;
	if (i_cache_validArray_3$EN)
	  i_cache_validArray_3 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_3$D_IN;
	if (i_cache_validArray_4$EN)
	  i_cache_validArray_4 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_4$D_IN;
	if (i_cache_validArray_5$EN)
	  i_cache_validArray_5 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_5$D_IN;
	if (i_cache_validArray_6$EN)
	  i_cache_validArray_6 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_6$D_IN;
	if (i_cache_validArray_7$EN)
	  i_cache_validArray_7 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_7$D_IN;
	if (i_cache_validArray_8$EN)
	  i_cache_validArray_8 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_8$D_IN;
	if (i_cache_validArray_9$EN)
	  i_cache_validArray_9 <= `BSV_ASSIGNMENT_DELAY
	      i_cache_validArray_9$D_IN;
	if (r$EN) r <= `BSV_ASSIGNMENT_DELAY r$D_IN;
	if (rcnt$EN) rcnt <= `BSV_ASSIGNMENT_DELAY rcnt$D_IN;
      end
    if (d_cache_missReq$EN)
      d_cache_missReq <= `BSV_ASSIGNMENT_DELAY d_cache_missReq$D_IN;
    if (dreq$EN) dreq <= `BSV_ASSIGNMENT_DELAY dreq$D_IN;
    if (i_cache_missReq$EN)
      i_cache_missReq <= `BSV_ASSIGNMENT_DELAY i_cache_missReq$D_IN;
    if (ireq$EN) ireq <= `BSV_ASSIGNMENT_DELAY ireq$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    b = 8'hAA;
    cnt = 8'hAA;
    cycle_count = 24'hAAAAAA;
    d_cache_cache_data_serverAdapter_cnt = 3'h2;
    d_cache_cache_data_serverAdapter_s1 = 2'h2;
    d_cache_dirtyArray_0 = 1'h0;
    d_cache_dirtyArray_1 = 1'h0;
    d_cache_dirtyArray_10 = 1'h0;
    d_cache_dirtyArray_11 = 1'h0;
    d_cache_dirtyArray_12 = 1'h0;
    d_cache_dirtyArray_13 = 1'h0;
    d_cache_dirtyArray_14 = 1'h0;
    d_cache_dirtyArray_15 = 1'h0;
    d_cache_dirtyArray_2 = 1'h0;
    d_cache_dirtyArray_3 = 1'h0;
    d_cache_dirtyArray_4 = 1'h0;
    d_cache_dirtyArray_5 = 1'h0;
    d_cache_dirtyArray_6 = 1'h0;
    d_cache_dirtyArray_7 = 1'h0;
    d_cache_dirtyArray_8 = 1'h0;
    d_cache_dirtyArray_9 = 1'h0;
    d_cache_hitCount = 32'hAAAAAAAA;
    d_cache_hitQ_rv = 33'h0AAAAAAAA;
    d_cache_lockL1_register = 1'h0;
    d_cache_missCount = 32'hAAAAAAAA;
    d_cache_missReq = 65'h0AAAAAAAAAAAAAAAA;
    d_cache_mshr_register = 3'h2;
    d_cache_tagArray_0 = 22'h2AAAAA;
    d_cache_tagArray_1 = 22'h2AAAAA;
    d_cache_tagArray_10 = 22'h2AAAAA;
    d_cache_tagArray_11 = 22'h2AAAAA;
    d_cache_tagArray_12 = 22'h2AAAAA;
    d_cache_tagArray_13 = 22'h2AAAAA;
    d_cache_tagArray_14 = 22'h2AAAAA;
    d_cache_tagArray_15 = 22'h2AAAAA;
    d_cache_tagArray_2 = 22'h2AAAAA;
    d_cache_tagArray_3 = 22'h2AAAAA;
    d_cache_tagArray_4 = 22'h2AAAAA;
    d_cache_tagArray_5 = 22'h2AAAAA;
    d_cache_tagArray_6 = 22'h2AAAAA;
    d_cache_tagArray_7 = 22'h2AAAAA;
    d_cache_tagArray_8 = 22'h2AAAAA;
    d_cache_tagArray_9 = 22'h2AAAAA;
    d_cache_validArray_0 = 1'h0;
    d_cache_validArray_1 = 1'h0;
    d_cache_validArray_10 = 1'h0;
    d_cache_validArray_11 = 1'h0;
    d_cache_validArray_12 = 1'h0;
    d_cache_validArray_13 = 1'h0;
    d_cache_validArray_14 = 1'h0;
    d_cache_validArray_15 = 1'h0;
    d_cache_validArray_2 = 1'h0;
    d_cache_validArray_3 = 1'h0;
    d_cache_validArray_4 = 1'h0;
    d_cache_validArray_5 = 1'h0;
    d_cache_validArray_6 = 1'h0;
    d_cache_validArray_7 = 1'h0;
    d_cache_validArray_8 = 1'h0;
    d_cache_validArray_9 = 1'h0;
    dram_bram_serverAdapter_cnt = 3'h2;
    dram_bram_serverAdapter_s1 = 2'h2;
    dram_dl1_d_0_rv =
	513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dram_dl1_d_1_rv =
	513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dram_dl1_d_2_rv =
	513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dram_dl1_d_3_rv =
	513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dram_dl2_d_0_rv =
	513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dram_dl2_d_1_rv =
	513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dram_dl2_d_2_rv =
	513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dram_dl2_d_3_rv =
	513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dreq = 68'hAAAAAAAAAAAAAAAAA;
    g = 8'hAA;
    i_cache_cache_data_serverAdapter_cnt = 3'h2;
    i_cache_cache_data_serverAdapter_s1 = 2'h2;
    i_cache_dirtyArray_0 = 1'h0;
    i_cache_dirtyArray_1 = 1'h0;
    i_cache_dirtyArray_10 = 1'h0;
    i_cache_dirtyArray_11 = 1'h0;
    i_cache_dirtyArray_12 = 1'h0;
    i_cache_dirtyArray_13 = 1'h0;
    i_cache_dirtyArray_14 = 1'h0;
    i_cache_dirtyArray_15 = 1'h0;
    i_cache_dirtyArray_2 = 1'h0;
    i_cache_dirtyArray_3 = 1'h0;
    i_cache_dirtyArray_4 = 1'h0;
    i_cache_dirtyArray_5 = 1'h0;
    i_cache_dirtyArray_6 = 1'h0;
    i_cache_dirtyArray_7 = 1'h0;
    i_cache_dirtyArray_8 = 1'h0;
    i_cache_dirtyArray_9 = 1'h0;
    i_cache_hitCount = 32'hAAAAAAAA;
    i_cache_hitQ_rv = 66'h2AAAAAAAAAAAAAAAA;
    i_cache_missCount = 32'hAAAAAAAA;
    i_cache_missReq = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    i_cache_mshr_register = 3'h2;
    i_cache_tagArray_0 = 22'h2AAAAA;
    i_cache_tagArray_1 = 22'h2AAAAA;
    i_cache_tagArray_10 = 22'h2AAAAA;
    i_cache_tagArray_11 = 22'h2AAAAA;
    i_cache_tagArray_12 = 22'h2AAAAA;
    i_cache_tagArray_13 = 22'h2AAAAA;
    i_cache_tagArray_14 = 22'h2AAAAA;
    i_cache_tagArray_15 = 22'h2AAAAA;
    i_cache_tagArray_2 = 22'h2AAAAA;
    i_cache_tagArray_3 = 22'h2AAAAA;
    i_cache_tagArray_4 = 22'h2AAAAA;
    i_cache_tagArray_5 = 22'h2AAAAA;
    i_cache_tagArray_6 = 22'h2AAAAA;
    i_cache_tagArray_7 = 22'h2AAAAA;
    i_cache_tagArray_8 = 22'h2AAAAA;
    i_cache_tagArray_9 = 22'h2AAAAA;
    i_cache_validArray_0 = 1'h0;
    i_cache_validArray_1 = 1'h0;
    i_cache_validArray_10 = 1'h0;
    i_cache_validArray_11 = 1'h0;
    i_cache_validArray_12 = 1'h0;
    i_cache_validArray_13 = 1'h0;
    i_cache_validArray_14 = 1'h0;
    i_cache_validArray_15 = 1'h0;
    i_cache_validArray_2 = 1'h0;
    i_cache_validArray_3 = 1'h0;
    i_cache_validArray_4 = 1'h0;
    i_cache_validArray_5 = 1'h0;
    i_cache_validArray_6 = 1'h0;
    i_cache_validArray_7 = 1'h0;
    i_cache_validArray_8 = 1'h0;
    i_cache_validArray_9 = 1'h0;
    ireq = 101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    r = 8'hAA;
    rcnt = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge pin_clk)
  begin
    #0;
    if (usr_btn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dram_bram_serverAdapter_overRun)
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (usr_btn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_i_cache_cache_data_serverAdapter_overRun)
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (usr_btn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_d_cache_cache_data_serverAdapter_overRun)
	$display("ERROR: %m: mkBRAMAdapter overrun");
  end
  // synopsys translate_on
endmodule  // top

